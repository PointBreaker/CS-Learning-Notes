{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7f51\u7ad9\u5efa\u8bbe\u4e2d \u656c\u8bf7\u671f\u5f85","title":"\u524d\u8a00"},{"location":"#_1","text":"\u656c\u8bf7\u671f\u5f85","title":"\u7f51\u7ad9\u5efa\u8bbe\u4e2d"},{"location":"Latex/","text":"Latex\u6570\u5b66\u516c\u5f0f \u5728Markdown\u4e2d - \u548c / \u9700\u8981\u7528 / \u8f6c\u4e49\uff01 \u884c\u5185\u516c\u5f0f \u884c\u4e2d\u516c\u5f0fa^2+b^2=c^2\u5728\u540c\u4e00\u884c\u4e2d\u663e\u793a \u884c\u4e2d\u516c\u5f0f \\(a^2+b^2=c^2\\) \u5728\u540c\u4e00\u884c\u4e2d\u663e\u793a \u5757\u72b6\u516c\u5f0f \u5757\u72b6\u516c\u5f0f 3^2+4^2=5^2 \u5757\u72b6\u516c\u5f0f \\(3^2+4^2=5^2\\) \u5206\u6570 1+2+3+\\dots+(n-1)+n = \\frac{n(n+1)}{2} \\(1+2+3+\\dots+(n-1)+n = \\frac{n(n+1)}{2}\\) \u7d2f\u52a0 \\sum_{i=1}^{n}i=\\frac{n(n+1)}{2} \\(\\sum_{i=1}^{n}i=\\frac{n(n+1)}{2}\\) \u6781\u9650 \\lim_{x\\rightarrow{\\infty}}(1+\\frac{1}{x})^{x}=e \\(\\lim_{x\\rightarrow{\\infty}}(1+\\frac{1}{x})^{x}=e\\\\\\) \u79ef\u5206 \\int_{a}^{b}f(x)dx=F(b)-F(a) \\(\\int_{a}^{b}f(x)dx=F(b)-F(a)\\\\\\) \u5bfc\u6570 \\frac{\\partial f(x)}{\\partial x}=x^2 \\(\\frac{\\partial f(x)}{\\partial x}=x^2\\) \u5206\u884c x+y = z\\\\a=4 \\[ x+y = z \\\\ a=4 \\] \u5206\u6bb5\u51fd\u6570 f(x) = \\begin{cases} x+2y^2-z+\\frac{1}{x} & x = 10\\\\ -x & x < 1 \\end{cases} \\[ f(x) = \\begin{cases} x+2y^2-z+\\frac{1}{x} & x = 10\\\\ -x & x < 1 \\end{cases} \\] \u77e9\u9635 \\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\[ \\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\] \u884c\u5217\u5f0f \\left| \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right| \\[ \\left| \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right| \\] \u5206\u5757\u77e9\u9635 \\left[ \\begin{array}{cc|c} 1&1&1 \\\\ 2&2&2 \\\\ \\hline 3&3&3 \\end{array} \\right] \\[ \\left[ \\begin{array}{cc|c} 1&1&1 \\\\ 2&2&2 \\\\ \\hline 3&3&3 \\end{array} \\right] \\]","title":"Latex"},{"location":"Latex/#latex","text":"\u5728Markdown\u4e2d - \u548c / \u9700\u8981\u7528 / \u8f6c\u4e49\uff01","title":"Latex\u6570\u5b66\u516c\u5f0f"},{"location":"Latex/#_1","text":"\u884c\u4e2d\u516c\u5f0fa^2+b^2=c^2\u5728\u540c\u4e00\u884c\u4e2d\u663e\u793a \u884c\u4e2d\u516c\u5f0f \\(a^2+b^2=c^2\\) \u5728\u540c\u4e00\u884c\u4e2d\u663e\u793a","title":"\u884c\u5185\u516c\u5f0f"},{"location":"Latex/#_2","text":"\u5757\u72b6\u516c\u5f0f 3^2+4^2=5^2 \u5757\u72b6\u516c\u5f0f \\(3^2+4^2=5^2\\)","title":"\u5757\u72b6\u516c\u5f0f"},{"location":"Latex/#_3","text":"1+2+3+\\dots+(n-1)+n = \\frac{n(n+1)}{2} \\(1+2+3+\\dots+(n-1)+n = \\frac{n(n+1)}{2}\\)","title":"\u5206\u6570"},{"location":"Latex/#_4","text":"\\sum_{i=1}^{n}i=\\frac{n(n+1)}{2} \\(\\sum_{i=1}^{n}i=\\frac{n(n+1)}{2}\\)","title":"\u7d2f\u52a0"},{"location":"Latex/#_5","text":"\\lim_{x\\rightarrow{\\infty}}(1+\\frac{1}{x})^{x}=e \\(\\lim_{x\\rightarrow{\\infty}}(1+\\frac{1}{x})^{x}=e\\\\\\)","title":"\u6781\u9650"},{"location":"Latex/#_6","text":"\\int_{a}^{b}f(x)dx=F(b)-F(a) \\(\\int_{a}^{b}f(x)dx=F(b)-F(a)\\\\\\)","title":"\u79ef\u5206"},{"location":"Latex/#_7","text":"\\frac{\\partial f(x)}{\\partial x}=x^2 \\(\\frac{\\partial f(x)}{\\partial x}=x^2\\)","title":"\u5bfc\u6570"},{"location":"Latex/#_8","text":"x+y = z\\\\a=4 \\[ x+y = z \\\\ a=4 \\]","title":"\u5206\u884c"},{"location":"Latex/#_9","text":"f(x) = \\begin{cases} x+2y^2-z+\\frac{1}{x} & x = 10\\\\ -x & x < 1 \\end{cases} \\[ f(x) = \\begin{cases} x+2y^2-z+\\frac{1}{x} & x = 10\\\\ -x & x < 1 \\end{cases} \\]","title":"\u5206\u6bb5\u51fd\u6570"},{"location":"Latex/#_10","text":"\\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\[ \\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\]","title":"\u77e9\u9635"},{"location":"Latex/#_11","text":"\\left| \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right| \\[ \\left| \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right| \\]","title":"\u884c\u5217\u5f0f"},{"location":"Latex/#_12","text":"\\left[ \\begin{array}{cc|c} 1&1&1 \\\\ 2&2&2 \\\\ \\hline 3&3&3 \\end{array} \\right] \\[ \\left[ \\begin{array}{cc|c} 1&1&1 \\\\ 2&2&2 \\\\ \\hline 3&3&3 \\end{array} \\right] \\]","title":"\u5206\u5757\u77e9\u9635"},{"location":"Linux/script/","text":"Shell Scripting In this lecture, we will present some of the basics of using bash as a scripting language along with a number of shell tools that cover several of the most common tasks that you will be constantly performing in the command line. Basic Sytax Basic value assign # bobby @ BobbydeMBP in ~ [10:58:23] $ foo=bar # bobby @ BobbydeMBP in ~ [10:58:28] $ echo $foo bar Notice : spaces are very critical when dealing with bash, because spaces are reserved and will be for separating arguments # bobby @ BobbydeMBP in ~ [10:58:32] $ foo = bar zsh: command not found: foo Print String echo with double quote \" \" or single quote ' ' can be used to deal with printing string # bobby @ BobbydeMBP in ~ [11:04:40] $ echo \"Hello\" Hello # bobby @ BobbydeMBP in ~ [11:09:33] $ echo 'World' World single quote ' ' won't be replacing the value, while double quote \" \" does it # bobby @ BobbydeMBP in ~ [11:13:09] $ echo \"Value is $foo\" Value is bar # bobby @ BobbydeMBP in ~ [11:13:19] $ echo 'Value is $foo' Value is $foo Define Functions bash also support control flows like for loops , while loops , combine all that, you can define functions with bash # mcd.sh mcd () { mkdir -p \"$1\" cd \"$1\" } $1 stands for the first argument of input, in bash we use $ with number or syntax to represent arguments % The result of execution # bobby @ BobbydeMBP in ~ [13:34:50] $ source mcd.sh # bobby @ BobbydeMBP in ~ [13:34:55] $ mcd test # bobby @ BobbydeMBP in ~/test [13:35:01] $0 - Name of the script $1 to $9 - Arguments to the script. $1 is the first argument and so on. $@ - All the arguments $# - Number of arguments $? - Return code of the previous command $$ - Process identification number (PID) for the current script !! - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing sudo !! $_ - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing Esc followed by . % example of $_ - Last argument from the last command # bobby @ BobbydeMBP in ~ [14:00:42] $ rmdir test # bobby @ BobbydeMBP in ~ [14:00:48] $ echo $_ test # bobby @ BobbydeMBP in ~ [13:36:48] $ mkdir test # bobby @ BobbydeMBP in ~ [13:36:51] $ cd $_ # bobby @ BobbydeMBP in ~/test [13:36:59] % example of !! - Entire last command # bobby @ BobbydeMBP in ~ [13:39:51] $ mkdir /new mkdir: /new: Read-only file system # bobby @ BobbydeMBP in ~ [13:39:54] C:1 $ sudo !! # bobby @ BobbydeMBP in ~ [13:39:59] C:1 $ sudo mkdir /new Password: sudo: no password was provided sudo: a password is required % example of $? - Return code of the previous command # bobby @ BobbydeMBP in ~ [14:02:09] $ echo \"Hello\" Hello # bobby @ BobbydeMBP in ~ [14:02:14] $ echo $? 0 # bobby @ BobbydeMBP in ~ [14:02:17] $ grep foobar mcd.sh # bobby @ BobbydeMBP in ~ [14:04:09] C:1 $ echo $? 1 # bobby @ BobbydeMBP in ~ [14:05:11] $ true # bobby @ BobbydeMBP in ~ [14:05:12] $ echo $? 0 # bobby @ BobbydeMBP in ~ [14:05:16] $ false # bobby @ BobbydeMBP in ~ [14:05:21] C:1 $ echo $? 1 Return code 0 means it's ok Return code 1 means it encountered some error while executing We can use these features to execute some logical commands # bobby @ BobbydeMBP in ~ [14:05:26] $ false || echo \"Oops fail\" Oops fail # bobby @ BobbydeMBP in ~ [14:05:55] $ true || echo \"Will not be printed\" # bobby @ BobbydeMBP in ~ [14:06:09] $ false && echo \"This will not print\" # bobby @ BobbydeMBP in ~ [14:06:34] C:1 $ false; echo \"This will always be printed\" This will always be printed Getting the output into a variable we can use variable to save some output of command # bobby @ BobbydeMBP in ~ [14:10:38] $ foo=$(pwd) # bobby @ BobbydeMBP in ~ [14:10:49] $ echo $foo /Users/bobby # bobby @ BobbydeMBP in ~ [14:10:54] $ echo \"We are in $foo\" We are in /Users/bobby we can use <(command) to redirect the output of command, for example, we can concatenate output of ls current folder and ls parent folder. # bobby @ BobbydeMBP in ~ [14:11:57] $ cat <(ls) <(ls ..) 18-645 Applications COMP1001 CS61B CS61C Comp2611 Desktop Documents Downloads Library Movies Music Pictures Public mcd.sh Shared bobby An example script #!/bin/bash echo \"Starting program at $(date)\" # Date will be substituted echo \"Running program $0 with $# arguments with pid $$\" for file in \"$@\"; do grep foobar \"$file\" > /dev/null 2> /dev/null # When pattern is not found, grep has exit status 1 # We redirect STDOUT and STDERR to a null register since we do not care about them if [[ $? -ne 0 ]]; then echo \"File $file does not have any foobar, adding one\" echo \"# foobar\" >> \"$file\" fi done let\u2019s see an example that showcases some of these features. It will iterate through the arguments we provide, grep for the string foobar , and append it to the file as a comment if it\u2019s not found. # bobby @ BobbydeMBP in ~ [14:27:29] C:126 $ chmod +x example.sh # bobby @ BobbydeMBP in ~ [14:27:34] $ ./example.sh mcd.sh example.sh Starting program at 2021\u5e7410\u6708 6\u65e5 \u661f\u671f\u4e09 14\u65f627\u520641\u79d2 CST Running program ./example.sh with 2 arguments with pid 4145 File mcd.sh does not have any foobar, adding one # bobby @ BobbydeMBP in ~ [14:27:41] $ cat <(cat mcd.sh) <(cat example.sh) mcd () { mkdir -p \"$1\" cd \"$1\" } # foobar #!/bin/bash echo \"Starting program at $(date)\" # Date will be substituted echo \"Running program $0 with $# arguments with pid $$\" for file in \"$@\"; do grep foobar \"$file\" > /dev/null 2> /dev/null # When pattern is not found, grep has exit status 1 # We redirect STDOUT and STDERR to a null register since we do not care about them if [[ $? -ne 0 ]]; then echo \"File $file does not have any foobar, adding one\" echo \"# foobar\" >> \"$file\" fi done RE : Regular expression # bobby @ BobbydeMBP in ~ [14:33:03] $ mkdir project1 project project42 # bobby @ BobbydeMBP in ~ [14:33:16] $ ls *.sh example.sh mcd.sh # bobby @ BobbydeMBP in ~ [14:33:29] $ ls project* project: project1: project42: Note : we use ? for single character substitution We can also use curly quote to expand expression # bobby @ BobbydeMBP in ~ [14:43:37] $ mv image.jpg image.png # bobby @ BobbydeMBP in ~ [14:44:02] $ ls image.* image.png # bobby @ BobbydeMBP in ~ [14:44:10] $ mv image.{png,jpg} # bobby @ BobbydeMBP in ~ [14:44:21] $ ls image.* image.jpg this operation is very powerful, we can use it to creat files/folder in the format we want, etc # bobby @ BobbydeMBP in ~/temp [14:46:07] $ touch foo{,1,2,10} # bobby @ BobbydeMBP in ~/temp [14:47:16] $ ls foo foo1 foo10 foo2 # bobby @ BobbydeMBP in ~/temp [14:48:50] $ mkdir project{1,2} # bobby @ BobbydeMBP in ~/temp [14:49:14] C:1 $ mkdir project{1,2}/src/ # bobby @ BobbydeMBP in ~/temp [14:49:23] $ mkdir project{1,2}/src/test # bobby @ BobbydeMBP in ~/temp [14:49:25] $ touch project{1,2}/src/test/test{1,2,3}.py # bobby @ BobbydeMBP in ~/temp [14:49:35] $ tree . . \u251c\u2500\u2500 project1 \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 test1.py \u2502 \u251c\u2500\u2500 test2.py \u2502 \u2514\u2500\u2500 test3.py \u2514\u2500\u2500 project2 \u2514\u2500\u2500 src \u2514\u2500\u2500 test \u251c\u2500\u2500 test1.py \u251c\u2500\u2500 test2.py \u2514\u2500\u2500 test3.py 6 directories, 6 files # bobby @ BobbydeMBP in ~/temp [14:51:51] $ mkdir foo bar # bobby @ BobbydeMBP in ~/temp [14:51:57] $ touch {foo,bar}/{a..j} # bobby @ BobbydeMBP in ~/temp [14:52:20] $ touch foo/x bar/y # bobby @ BobbydeMBP in ~/temp [14:52:34] $ diff <(ls foo) <(ls bar) 11c11 < x --- > y Bash Script #!/usr/local/bin/python import sys for arg in reversed(sys.argv[1:]): print(arg) this script just print the argument we passed in reversed order # bobby @ BobbydeMBP in ~/temp [14:58:18] $ python3 script.py a b c d e e d c b a However int the shebang line at the top of the script, It is good practice to write shebang lines using the env command that will resolve to wherever the command lives in the system, increasing the portability of your scripts. To resolve the location, env will make use of the PATH environment variable we introduced in the first lecture. For this example the shebang line would look like #!/usr/bin/env python . For checking the grammar of shell script, we can use shellcheck # bobby @ BobbydeMBP in ~/temp [15:04:47] $ shellcheck mcd.sh In mcd.sh line 1: mcd () { ^-- SC2148: Tips depend on target shell and yours is unknown. Add a shebang or a 'shell' directive. In mcd.sh line 3: cd \"$1\" ^-----^ SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails. Did you mean: cd \"$1\" || exit For more information: https://www.shellcheck.net/wiki/SC2148 -- Tips depend on target shell and y... https://www.shellcheck.net/wiki/SC2164 -- Use 'cd ... || exit' or 'cd ... |... from man to tldr tldr is just more readable than man page... whatever, just use it # bobby @ BobbydeMBP in ~/temp [15:15:00] $ tldr tar tar Archiving utility. Often combined with a compression method, such as gzip or bzip2. More information: <https://www.gnu.org/software/tar>. - [c]reate an archive and write it to a [f]ile: tar cf target.tar file1 file2 file3 - [c]reate a g[z]ipped archive and write it to a [f]ile: tar czf target.tar.gz file1 file2 file3 - [c]reate a g[z]ipped archive from a directory using relative paths: tar czf target.tar.gz --directory=path/to/directory . - E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely: tar xvf source.tar[.gz|.bz2|.xz] - E[x]tract a (compressed) archive [f]ile into the target directory: tar xf source.tar[.gz|.bz2|.xz] --directory=directory - [c]reate a compressed archive and write it to a [f]ile, using [a]rchive suffix to determine the compression program: tar caf target.tar.xz file1 file2 file3 - Lis[t] the contents of a tar [f]ile [v]erbosely: tar tvf source.tar - E[x]tract files matching a pattern from an archive [f]ile: tar xf source.tar --wildcards \"*.html\" it's kind of useful when meeting with new commands, you don't want to remember all the tag s for a command, don't you? Shell Tools When we are finding a file, instead of recursively using cd and ls , use find is way better # bobby @ BobbydeMBP in ~/temp [15:19:29] $ find . -name src -type d ./project1/src ./project2/src # bobby @ BobbydeMBP in ~/temp [15:22:50] $ find . -path '**/test/*.py' -type f ./project1/src/test/test4.py ./project1/src/test/test1.py ./project1/src/test/test5.py ./project1/src/test/test2.py ./project1/src/test/test3.py ./project2/src/test/test4.py ./project2/src/test/test1.py ./project2/src/test/test5.py ./project2/src/test/test2.py ./project2/src/test/test3.py You can also execute command with find # bobby @ BobbydeMBP in ~/temp [15:25:09] $ find . -name \"*.tmp\" -type f ./project1/src/test/test2.tmp ./project1/src/test/test3.tmp ./project1/src/test/test1.tmp ./project2/src/test/test2.tmp ./project2/src/test/test3.tmp ./project2/src/test/test1.tmp # bobby @ BobbydeMBP in ~/temp [15:25:24] $ find . -name \"*.tmp\" -type f -exec rm {} \\; # bobby @ BobbydeMBP in ~/temp [15:26:14] $ find . -name \"*.tmp\" -type f # bobby @ BobbydeMBP in ~/temp [15:26:18] $ echo $? 0 You might think find command it quite complex, fd is a much simpler command # bobby @ BobbydeMBP in ~/temp [15:30:43] C:1 $ fd \".*py\" project1/src/test/test1.py project1/src/test/test2.py project1/src/test/test3.py project1/src/test/test4.py project1/src/test/test5.py project2/src/test/test1.py project2/src/test/test2.py project2/src/test/test3.py project2/src/test/test4.py project2/src/test/test5.py script.py use of grep # bobby @ BobbydeMBP in ~/temp [15:38:47] $ grep foobar mcd.sh # foobar # bobby @ BobbydeMBP in ~/temp [15:38:53] $ grep -R foobar . ./example.sh: grep foobar \"$file\" > /dev/null 2> /dev/null ./example.sh: echo \"File $file does not have any foobar, adding one\" ./example.sh: echo \"# foobar\" >> \"$file\" ./mcd.sh:# foobar We can search pattern in specific file, or we can do thar recursively in give directory An alternative is rg , check the usage, it's pretty neat # Find all python files where I used the requests library rg -t py 'import requests' # Find all files (including hidden files) without a shebang line rg -u --files-without-match \"^#!\" # Find all matches of foo and print the following 5 lines rg foo -A 5 # Print statistics of matches (# of matched lines and files ) rg --stats PATTERN history command can list a history of command you have used, also control + r provides a backward search through the command you have used. # bobby @ BobbydeMBP in ~/temp [15:55:34] $ history | tail -n 10 765 rg 766 brew install rg 767 rg -t py 768 \"\" 769 rg -t py 'import request' 770 rg -t sh '#' 771 rg foobar . 772 history 773 clear 774 history # bobby @ BobbydeMBP in ~/temp [15:55:46] $ rg foobar . bck-i-search: rg_ broot command! navigate through the directory Just Try it out Exercises Read man ls and write an ls command that lists files in the following manner Includes all files, including hidden files Sizes are listed in human readable format (e.g. 454M instead of 454279954) Files are ordered by recency Output is colorized A sample output would look like this -rw-r--r-- 1 user group 1.1M Jan 14 09:53 baz drwxr-xr-x 5 user group 160 Jan 14 09:53 . -rw-r--r-- 1 user group 514 Jan 14 06:42 bar -rw-r--r-- 1 user group 106M Jan 13 12:12 foo drwx------+ 47 user group 1.5K Jan 12 18:08 .. ls -laht should do the trick # bobby @ BobbydeMBP in ~/temp [16:30:30] $ ls -laht total 64 drwxr-xr-x+ 42 bobby staff 1.3K 10 6 16:30 .. drwxr-xr-x 10 bobby staff 320B 10 6s 16:27 . drwxr-xr-x 2 bobby staff 64B 10 6 16:27 .hidden_folder -rw-r--r-- 1 bobby staff 0B 10 6 16:26 .hidden drwxr-xr-x 3 bobby staff 96B 10 6 15:19 project2 drwxr-xr-x 3 bobby staff 96B 10 6 15:19 project1 -rw-r--r-- 1 bobby staff 85B 10 6 14:55 script.py -rw-r--r--@ 1 bobby staff 17K 10 6 14:39 image.jpg -rw-r--r-- 1 bobby staff 44B 10 6 14:27 mcd.sh -rwxr-xr-x 1 bobby staff 484B 10 6 14:18 example.sh Write bash functions marco and polo that do the following. Whenever you execute marco the current working directory should be saved in some manner, then when you execute polo , no matter what directory you are in, polo should cd you back to the directory where you executed marco . For ease of debugging you can write the code in a file marco.sh and (re)load the definitions to your shell by executing source marco.sh . Just just a variable foo to store the current folder, and cd into that folder when we call polo # marco.sh marco () { foo=$(pwd) } polo () { cd $foo } Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many runs it took for the script to fail. #!/usr/bin/env bash n=$(( RANDOM % 100 )) if [[ n -eq 42 ]]; then echo \"Something went wrong\" >&2 echo \"The error was using magic numbers\" exit 1 fi echo \"Everything went according to plan\" We use a while-loop to decide wether to continue depending on last execution's return code, with cnt=0 , the loop will start, and after each iteration, $? Should capture the scipt 's return code. # test_rare.sh #!/usr/bin/env bash rm output 2>/dev/null cnt=0 while [[ $? -eq 0 ]] do let \"cnt++\" ./$1 >> ./output 2>> ./output done let \"cnt--\" cat ./output echo \"It took $cnt runs for the script to fail\" As we covered in the lecture find \u2019s -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there\u2019s the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory. Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check -d flag for xargs ). If you\u2019re on macOS, note that the default BSD find is different from the one included in GNU coreutils . You can use -print0 on find and the -0 flag on xargs . As a macOS user, you should be aware that command-line utilities shipped with macOS may differ from the GNU counterparts; you can install the GNU versions if you like by using brew . # bobby @ BobbydeMBP in ~/temp/wtf [19:10:53] $ find . -name \"*.html\" -type f -print0 | xargs -0 zip -r compressed.zip (Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency? This one is out of my reach","title":"Script"},{"location":"Linux/script/#shell-scripting","text":"In this lecture, we will present some of the basics of using bash as a scripting language along with a number of shell tools that cover several of the most common tasks that you will be constantly performing in the command line.","title":"Shell Scripting"},{"location":"Linux/script/#basic-sytax","text":"","title":"Basic Sytax"},{"location":"Linux/script/#basic-value-assign","text":"# bobby @ BobbydeMBP in ~ [10:58:23] $ foo=bar # bobby @ BobbydeMBP in ~ [10:58:28] $ echo $foo bar Notice : spaces are very critical when dealing with bash, because spaces are reserved and will be for separating arguments # bobby @ BobbydeMBP in ~ [10:58:32] $ foo = bar zsh: command not found: foo","title":"Basic value assign"},{"location":"Linux/script/#print-string","text":"echo with double quote \" \" or single quote ' ' can be used to deal with printing string # bobby @ BobbydeMBP in ~ [11:04:40] $ echo \"Hello\" Hello # bobby @ BobbydeMBP in ~ [11:09:33] $ echo 'World' World single quote ' ' won't be replacing the value, while double quote \" \" does it # bobby @ BobbydeMBP in ~ [11:13:09] $ echo \"Value is $foo\" Value is bar # bobby @ BobbydeMBP in ~ [11:13:19] $ echo 'Value is $foo' Value is $foo","title":"Print String"},{"location":"Linux/script/#define-functions","text":"bash also support control flows like for loops , while loops , combine all that, you can define functions with bash # mcd.sh mcd () { mkdir -p \"$1\" cd \"$1\" } $1 stands for the first argument of input, in bash we use $ with number or syntax to represent arguments % The result of execution # bobby @ BobbydeMBP in ~ [13:34:50] $ source mcd.sh # bobby @ BobbydeMBP in ~ [13:34:55] $ mcd test # bobby @ BobbydeMBP in ~/test [13:35:01] $0 - Name of the script $1 to $9 - Arguments to the script. $1 is the first argument and so on. $@ - All the arguments $# - Number of arguments $? - Return code of the previous command $$ - Process identification number (PID) for the current script !! - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing sudo !! $_ - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing Esc followed by . % example of $_ - Last argument from the last command # bobby @ BobbydeMBP in ~ [14:00:42] $ rmdir test # bobby @ BobbydeMBP in ~ [14:00:48] $ echo $_ test # bobby @ BobbydeMBP in ~ [13:36:48] $ mkdir test # bobby @ BobbydeMBP in ~ [13:36:51] $ cd $_ # bobby @ BobbydeMBP in ~/test [13:36:59] % example of !! - Entire last command # bobby @ BobbydeMBP in ~ [13:39:51] $ mkdir /new mkdir: /new: Read-only file system # bobby @ BobbydeMBP in ~ [13:39:54] C:1 $ sudo !! # bobby @ BobbydeMBP in ~ [13:39:59] C:1 $ sudo mkdir /new Password: sudo: no password was provided sudo: a password is required % example of $? - Return code of the previous command # bobby @ BobbydeMBP in ~ [14:02:09] $ echo \"Hello\" Hello # bobby @ BobbydeMBP in ~ [14:02:14] $ echo $? 0 # bobby @ BobbydeMBP in ~ [14:02:17] $ grep foobar mcd.sh # bobby @ BobbydeMBP in ~ [14:04:09] C:1 $ echo $? 1 # bobby @ BobbydeMBP in ~ [14:05:11] $ true # bobby @ BobbydeMBP in ~ [14:05:12] $ echo $? 0 # bobby @ BobbydeMBP in ~ [14:05:16] $ false # bobby @ BobbydeMBP in ~ [14:05:21] C:1 $ echo $? 1 Return code 0 means it's ok Return code 1 means it encountered some error while executing We can use these features to execute some logical commands # bobby @ BobbydeMBP in ~ [14:05:26] $ false || echo \"Oops fail\" Oops fail # bobby @ BobbydeMBP in ~ [14:05:55] $ true || echo \"Will not be printed\" # bobby @ BobbydeMBP in ~ [14:06:09] $ false && echo \"This will not print\" # bobby @ BobbydeMBP in ~ [14:06:34] C:1 $ false; echo \"This will always be printed\" This will always be printed","title":"Define Functions"},{"location":"Linux/script/#getting-the-output-into-a-variable","text":"we can use variable to save some output of command # bobby @ BobbydeMBP in ~ [14:10:38] $ foo=$(pwd) # bobby @ BobbydeMBP in ~ [14:10:49] $ echo $foo /Users/bobby # bobby @ BobbydeMBP in ~ [14:10:54] $ echo \"We are in $foo\" We are in /Users/bobby we can use <(command) to redirect the output of command, for example, we can concatenate output of ls current folder and ls parent folder. # bobby @ BobbydeMBP in ~ [14:11:57] $ cat <(ls) <(ls ..) 18-645 Applications COMP1001 CS61B CS61C Comp2611 Desktop Documents Downloads Library Movies Music Pictures Public mcd.sh Shared bobby An example script #!/bin/bash echo \"Starting program at $(date)\" # Date will be substituted echo \"Running program $0 with $# arguments with pid $$\" for file in \"$@\"; do grep foobar \"$file\" > /dev/null 2> /dev/null # When pattern is not found, grep has exit status 1 # We redirect STDOUT and STDERR to a null register since we do not care about them if [[ $? -ne 0 ]]; then echo \"File $file does not have any foobar, adding one\" echo \"# foobar\" >> \"$file\" fi done let\u2019s see an example that showcases some of these features. It will iterate through the arguments we provide, grep for the string foobar , and append it to the file as a comment if it\u2019s not found. # bobby @ BobbydeMBP in ~ [14:27:29] C:126 $ chmod +x example.sh # bobby @ BobbydeMBP in ~ [14:27:34] $ ./example.sh mcd.sh example.sh Starting program at 2021\u5e7410\u6708 6\u65e5 \u661f\u671f\u4e09 14\u65f627\u520641\u79d2 CST Running program ./example.sh with 2 arguments with pid 4145 File mcd.sh does not have any foobar, adding one # bobby @ BobbydeMBP in ~ [14:27:41] $ cat <(cat mcd.sh) <(cat example.sh) mcd () { mkdir -p \"$1\" cd \"$1\" } # foobar #!/bin/bash echo \"Starting program at $(date)\" # Date will be substituted echo \"Running program $0 with $# arguments with pid $$\" for file in \"$@\"; do grep foobar \"$file\" > /dev/null 2> /dev/null # When pattern is not found, grep has exit status 1 # We redirect STDOUT and STDERR to a null register since we do not care about them if [[ $? -ne 0 ]]; then echo \"File $file does not have any foobar, adding one\" echo \"# foobar\" >> \"$file\" fi done RE : Regular expression # bobby @ BobbydeMBP in ~ [14:33:03] $ mkdir project1 project project42 # bobby @ BobbydeMBP in ~ [14:33:16] $ ls *.sh example.sh mcd.sh # bobby @ BobbydeMBP in ~ [14:33:29] $ ls project* project: project1: project42: Note : we use ? for single character substitution We can also use curly quote to expand expression # bobby @ BobbydeMBP in ~ [14:43:37] $ mv image.jpg image.png # bobby @ BobbydeMBP in ~ [14:44:02] $ ls image.* image.png # bobby @ BobbydeMBP in ~ [14:44:10] $ mv image.{png,jpg} # bobby @ BobbydeMBP in ~ [14:44:21] $ ls image.* image.jpg this operation is very powerful, we can use it to creat files/folder in the format we want, etc # bobby @ BobbydeMBP in ~/temp [14:46:07] $ touch foo{,1,2,10} # bobby @ BobbydeMBP in ~/temp [14:47:16] $ ls foo foo1 foo10 foo2 # bobby @ BobbydeMBP in ~/temp [14:48:50] $ mkdir project{1,2} # bobby @ BobbydeMBP in ~/temp [14:49:14] C:1 $ mkdir project{1,2}/src/ # bobby @ BobbydeMBP in ~/temp [14:49:23] $ mkdir project{1,2}/src/test # bobby @ BobbydeMBP in ~/temp [14:49:25] $ touch project{1,2}/src/test/test{1,2,3}.py # bobby @ BobbydeMBP in ~/temp [14:49:35] $ tree . . \u251c\u2500\u2500 project1 \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 test1.py \u2502 \u251c\u2500\u2500 test2.py \u2502 \u2514\u2500\u2500 test3.py \u2514\u2500\u2500 project2 \u2514\u2500\u2500 src \u2514\u2500\u2500 test \u251c\u2500\u2500 test1.py \u251c\u2500\u2500 test2.py \u2514\u2500\u2500 test3.py 6 directories, 6 files # bobby @ BobbydeMBP in ~/temp [14:51:51] $ mkdir foo bar # bobby @ BobbydeMBP in ~/temp [14:51:57] $ touch {foo,bar}/{a..j} # bobby @ BobbydeMBP in ~/temp [14:52:20] $ touch foo/x bar/y # bobby @ BobbydeMBP in ~/temp [14:52:34] $ diff <(ls foo) <(ls bar) 11c11 < x --- > y","title":"Getting the output into a variable"},{"location":"Linux/script/#bash-script","text":"#!/usr/local/bin/python import sys for arg in reversed(sys.argv[1:]): print(arg) this script just print the argument we passed in reversed order # bobby @ BobbydeMBP in ~/temp [14:58:18] $ python3 script.py a b c d e e d c b a However int the shebang line at the top of the script, It is good practice to write shebang lines using the env command that will resolve to wherever the command lives in the system, increasing the portability of your scripts. To resolve the location, env will make use of the PATH environment variable we introduced in the first lecture. For this example the shebang line would look like #!/usr/bin/env python . For checking the grammar of shell script, we can use shellcheck # bobby @ BobbydeMBP in ~/temp [15:04:47] $ shellcheck mcd.sh In mcd.sh line 1: mcd () { ^-- SC2148: Tips depend on target shell and yours is unknown. Add a shebang or a 'shell' directive. In mcd.sh line 3: cd \"$1\" ^-----^ SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails. Did you mean: cd \"$1\" || exit For more information: https://www.shellcheck.net/wiki/SC2148 -- Tips depend on target shell and y... https://www.shellcheck.net/wiki/SC2164 -- Use 'cd ... || exit' or 'cd ... |... from man to tldr tldr is just more readable than man page... whatever, just use it # bobby @ BobbydeMBP in ~/temp [15:15:00] $ tldr tar tar Archiving utility. Often combined with a compression method, such as gzip or bzip2. More information: <https://www.gnu.org/software/tar>. - [c]reate an archive and write it to a [f]ile: tar cf target.tar file1 file2 file3 - [c]reate a g[z]ipped archive and write it to a [f]ile: tar czf target.tar.gz file1 file2 file3 - [c]reate a g[z]ipped archive from a directory using relative paths: tar czf target.tar.gz --directory=path/to/directory . - E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely: tar xvf source.tar[.gz|.bz2|.xz] - E[x]tract a (compressed) archive [f]ile into the target directory: tar xf source.tar[.gz|.bz2|.xz] --directory=directory - [c]reate a compressed archive and write it to a [f]ile, using [a]rchive suffix to determine the compression program: tar caf target.tar.xz file1 file2 file3 - Lis[t] the contents of a tar [f]ile [v]erbosely: tar tvf source.tar - E[x]tract files matching a pattern from an archive [f]ile: tar xf source.tar --wildcards \"*.html\" it's kind of useful when meeting with new commands, you don't want to remember all the tag s for a command, don't you?","title":"Bash Script"},{"location":"Linux/script/#shell-tools","text":"When we are finding a file, instead of recursively using cd and ls , use find is way better # bobby @ BobbydeMBP in ~/temp [15:19:29] $ find . -name src -type d ./project1/src ./project2/src # bobby @ BobbydeMBP in ~/temp [15:22:50] $ find . -path '**/test/*.py' -type f ./project1/src/test/test4.py ./project1/src/test/test1.py ./project1/src/test/test5.py ./project1/src/test/test2.py ./project1/src/test/test3.py ./project2/src/test/test4.py ./project2/src/test/test1.py ./project2/src/test/test5.py ./project2/src/test/test2.py ./project2/src/test/test3.py You can also execute command with find # bobby @ BobbydeMBP in ~/temp [15:25:09] $ find . -name \"*.tmp\" -type f ./project1/src/test/test2.tmp ./project1/src/test/test3.tmp ./project1/src/test/test1.tmp ./project2/src/test/test2.tmp ./project2/src/test/test3.tmp ./project2/src/test/test1.tmp # bobby @ BobbydeMBP in ~/temp [15:25:24] $ find . -name \"*.tmp\" -type f -exec rm {} \\; # bobby @ BobbydeMBP in ~/temp [15:26:14] $ find . -name \"*.tmp\" -type f # bobby @ BobbydeMBP in ~/temp [15:26:18] $ echo $? 0 You might think find command it quite complex, fd is a much simpler command # bobby @ BobbydeMBP in ~/temp [15:30:43] C:1 $ fd \".*py\" project1/src/test/test1.py project1/src/test/test2.py project1/src/test/test3.py project1/src/test/test4.py project1/src/test/test5.py project2/src/test/test1.py project2/src/test/test2.py project2/src/test/test3.py project2/src/test/test4.py project2/src/test/test5.py script.py use of grep # bobby @ BobbydeMBP in ~/temp [15:38:47] $ grep foobar mcd.sh # foobar # bobby @ BobbydeMBP in ~/temp [15:38:53] $ grep -R foobar . ./example.sh: grep foobar \"$file\" > /dev/null 2> /dev/null ./example.sh: echo \"File $file does not have any foobar, adding one\" ./example.sh: echo \"# foobar\" >> \"$file\" ./mcd.sh:# foobar We can search pattern in specific file, or we can do thar recursively in give directory An alternative is rg , check the usage, it's pretty neat # Find all python files where I used the requests library rg -t py 'import requests' # Find all files (including hidden files) without a shebang line rg -u --files-without-match \"^#!\" # Find all matches of foo and print the following 5 lines rg foo -A 5 # Print statistics of matches (# of matched lines and files ) rg --stats PATTERN history command can list a history of command you have used, also control + r provides a backward search through the command you have used. # bobby @ BobbydeMBP in ~/temp [15:55:34] $ history | tail -n 10 765 rg 766 brew install rg 767 rg -t py 768 \"\" 769 rg -t py 'import request' 770 rg -t sh '#' 771 rg foobar . 772 history 773 clear 774 history # bobby @ BobbydeMBP in ~/temp [15:55:46] $ rg foobar . bck-i-search: rg_ broot command! navigate through the directory Just Try it out","title":"Shell Tools"},{"location":"Linux/script/#exercises","text":"Read man ls and write an ls command that lists files in the following manner Includes all files, including hidden files Sizes are listed in human readable format (e.g. 454M instead of 454279954) Files are ordered by recency Output is colorized A sample output would look like this -rw-r--r-- 1 user group 1.1M Jan 14 09:53 baz drwxr-xr-x 5 user group 160 Jan 14 09:53 . -rw-r--r-- 1 user group 514 Jan 14 06:42 bar -rw-r--r-- 1 user group 106M Jan 13 12:12 foo drwx------+ 47 user group 1.5K Jan 12 18:08 .. ls -laht should do the trick # bobby @ BobbydeMBP in ~/temp [16:30:30] $ ls -laht total 64 drwxr-xr-x+ 42 bobby staff 1.3K 10 6 16:30 .. drwxr-xr-x 10 bobby staff 320B 10 6s 16:27 . drwxr-xr-x 2 bobby staff 64B 10 6 16:27 .hidden_folder -rw-r--r-- 1 bobby staff 0B 10 6 16:26 .hidden drwxr-xr-x 3 bobby staff 96B 10 6 15:19 project2 drwxr-xr-x 3 bobby staff 96B 10 6 15:19 project1 -rw-r--r-- 1 bobby staff 85B 10 6 14:55 script.py -rw-r--r--@ 1 bobby staff 17K 10 6 14:39 image.jpg -rw-r--r-- 1 bobby staff 44B 10 6 14:27 mcd.sh -rwxr-xr-x 1 bobby staff 484B 10 6 14:18 example.sh Write bash functions marco and polo that do the following. Whenever you execute marco the current working directory should be saved in some manner, then when you execute polo , no matter what directory you are in, polo should cd you back to the directory where you executed marco . For ease of debugging you can write the code in a file marco.sh and (re)load the definitions to your shell by executing source marco.sh . Just just a variable foo to store the current folder, and cd into that folder when we call polo # marco.sh marco () { foo=$(pwd) } polo () { cd $foo } Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many runs it took for the script to fail. #!/usr/bin/env bash n=$(( RANDOM % 100 )) if [[ n -eq 42 ]]; then echo \"Something went wrong\" >&2 echo \"The error was using magic numbers\" exit 1 fi echo \"Everything went according to plan\" We use a while-loop to decide wether to continue depending on last execution's return code, with cnt=0 , the loop will start, and after each iteration, $? Should capture the scipt 's return code. # test_rare.sh #!/usr/bin/env bash rm output 2>/dev/null cnt=0 while [[ $? -eq 0 ]] do let \"cnt++\" ./$1 >> ./output 2>> ./output done let \"cnt--\" cat ./output echo \"It took $cnt runs for the script to fail\" As we covered in the lecture find \u2019s -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there\u2019s the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory. Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check -d flag for xargs ). If you\u2019re on macOS, note that the default BSD find is different from the one included in GNU coreutils . You can use -print0 on find and the -0 flag on xargs . As a macOS user, you should be aware that command-line utilities shipped with macOS may differ from the GNU counterparts; you can install the GNU versions if you like by using brew . # bobby @ BobbydeMBP in ~/temp/wtf [19:10:53] $ find . -name \"*.html\" -type f -print0 | xargs -0 zip -r compressed.zip (Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency? This one is out of my reach","title":"Exercises"},{"location":"Linux/shell/","text":"The Shell How To Use Shell ! Basic Command date : return current date echo : print something echo \"Hello World\" echo Hello\\ World : when the string contain a space, use \\ to translate echo $PATH : show all the path value which + command : return the location of command e.g: which echo Absolute Path and Relative Path pwd : return current directory cd : enter a directory . : current directory .. : parent directory e.g: cd ./temp : cd ../src : cd / : enter root cd ~ : enter current home cd - : toggle between current directory and last directory ls : list files in current directory ls -l : detail of ls execution of ls -l / : lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 bin -> usr/bin drwxr-xr-x 4 root root 4096 5\u6708 19 15:17 boot drwxrwxr-x 2 root root 4096 4\u6708 23 19:26 cdrom drwxr-xr-x 20 root root 4140 5\u6708 14 20:42 dev drwxr-xr-x 143 root root 12288 5\u6708 27 13:31 etc drwxr-xr-x 3 root root 4096 4\u6708 23 19:27 home lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 lib -> usr/lib lrwxrwxrwx 1 root root 9 4\u6708 23 19:24 lib32 -> usr/lib32 lrwxrwxrwx 1 root root 9 4\u6708 23 19:24 lib64 -> usr/lib64 lrwxrwxrwx 1 root root 10 4\u6708 23 19:24 libx32 -> usr/libx32 drwx------ 2 root root 16384 4\u6708 23 19:24 lost+found drwxr-xr-x 2 root root 4096 10\u6708 22 2020 media drwxr-xr-x 2 root root 4096 10\u6708 22 2020 mnt drwxr-xr-x 2 root root 4096 10\u6708 22 2020 opt dr-xr-xr-x 386 root root 0 5\u6708 5 10:14 proc drwx------ 3 root root 4096 4\u6708 25 11:24 root drwxr-xr-x 32 root root 1040 5\u6708 28 14:04 run lrwxrwxrwx 1 root root 8 4\u6708 23 19:24 sbin -> usr/sbin drwxr-xr-x 2 root root 4096 4\u6708 23 19:34 snap drwxr-xr-x 2 root root 4096 10\u6708 22 2020 srv -rw------- 1 root root 2147483648 4\u6708 23 19:24 swapfile dr-xr-xr-x 13 root root 0 5\u6708 5 10:14 sys drwxrwxrwt 42 root root 12288 5\u6708 28 14:09 tmp drwxr-xr-x 14 root root 4096 10\u6708 22 2020 usr drwxr-xr-x 14 root root 4096 10\u6708 22 2020 var Ls File Format lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 bin -> usr/bin First Charater meaning l : symbolic link file; d : directory; - : normal file; b : block; p : pipe; s : socket; c : character three character pair r : read w : write x : execute PS: - means you don't have the permission first three pair : permission for user root next three pair : permission for group root last three pairn : permission for everyone else File execution command mv foo.bar bar.foo : move(rename) foo.bar to bar.foo cp bar.foo ../ : copy bar.foo into parent directory rm ../bar.foo : remove bar.foo from parent directory mkdir My\\ code : make a folder named My Code rmdir My\\ code/ :remove the folder named My Code man + command : the manual description of command ctrl + l : move current prompt to top Stream input and output > : output stream < : input stream echo hello > hello.txt : write string hello into hello.txt cat hello.txt : show the content of hello.txt cat < hello.txt : cat use hello.txt as input cat < hello.txt > hello2.txt : cat from hello.txt and redirect to hello2.txt cat < hello.txt >> hello2.txt : append hello.txt to hello2.txt echo \"something\" >> hello2.txt : append something into hello2.txt Pipe | : pipe ls -l / | tail -n1 : return the last line of the ls -l / curl --head --silent google.com : HTTP/1.1 301 Moved Permanently Location: http://www.google.com/ Content-Type: text/html; charset=UTF-8 Date: Fri, 28 May 2021 07:23:47 GMT Expires: Sun, 27 Jun 2021 07:23:47 GMT Cache-Control: public, max-age=2592000 Server: gws Content-Length: 219 X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN curl --head --silent google.com | grep -i Content-Length : return : Content-Length: 219 curl --head --silent google.com | grep -i Content-Length | cut --delimiter= ' ' -f2 : return: 219 Root User sudo + command : do command as super user /sys/class : directory contains a lot of sys config files echo 500 > /sys/class/backlight/intel_backlight/brightness : permission denied sudo !! : still permission denied why? because sudo is used on echo , while > doesn't care about the previous command. $ : means you're not running as root # : means you're running as root sudo su : turn into root shell tee : write something to a file echo 1060 | sudo tee brightness : now brightness is 1060 xdg-open file : open a file with correct application Exercises All classes in this course are accompanied by a series of exercises. Some give you a specific task to do, while others are open-ended, like \u201ctry using X and Y programs\u201d. We highly encourage you to try them out. We have not written solutions for the exercises. If you are stuck on anything in particular, feel free to send us an email describing what you\u2019ve tried so far, and we will try to help you out. 1.For this course, you need to be using a Unix shell like Bash or ZSH. If you are on Linux or macOS, you don\u2019t have to do anything special. If you are on Windows, you need to make sure you are not running cmd.exe or PowerShell; you can use Windows Subsystem for Linux or a Linux virtual machine to use Unix-style command-line tools. To make sure you\u2019re running an appropriate shell, you can try the command echo $SHELL . If it says something like /bin/bash or /usr/bin/zsh , that means you\u2019re running the right program. 2.Create a new directory called missing under /tmp . 3.Look up the touch program. The man program is your friend. 4.Use touch to create a new file called semester in missing . 5.Write the following into that file, one line at a time: #!/bin/sh curl --head --silent https://missing.csail.mit.edu The first line might be tricky to get working. It\u2019s helpful to know that # starts a comment in Bash, and ! has a special meaning even within double-quoted (\") strings. Bash treats single-quoted strings (') differently: they will do the trick in this case. See the Bash quoting manual page for more information. # bobby @ BobbydeMBP in /tmp/missing [21:14:21] $ touch semester # bobby @ BobbydeMBP in /tmp/missing [21:14:32] $ echo \"#!/bin/sh\" > semester zsh: event not found: /bin/sh # bobby @ BobbydeMBP in /tmp/missing [21:14:47] C:1 $ cat semester # bobby @ BobbydeMBP in /tmp/missing [21:15:01] $ echo '#!/bin/sh' > semester # bobby @ BobbydeMBP in /tmp/missing [21:15:20] $ cat semester #!/bin/sh # bobby @ BobbydeMBP in /tmp/missing [21:15:24] $ echo \"curl --head --silent https://missing.csail.mit.edu\" >> semester # bobby @ BobbydeMBP in /tmp/missing [21:16:03] $ cat semester #!/bin/sh curl --head --silent https://missing.csail.mit.edu 6.Try to execute the file, i.e. type the path to the script (./semester) into your shell and press enter. Understand why it doesn\u2019t work by consulting the output of ls (hint: look at the permission bits of the file). # bobby @ BobbydeMBP in /tmp/missing [21:16:17] $ ./semester zsh: permission denied: ./semester # bobby @ BobbydeMBP in /tmp/missing [21:16:56] C:126 $ ls -l semester -rw-r--r-- 1 bobby wheel 61 10 5 21:16 semester 7.Run the command by explicitly starting the sh interpreter, and giving it the file semeste r as the first argument, i.e. sh semester . Why does this work, while ./semester didn\u2019t? when we use sh command, we take semester as input, what we really did was executing sh command, and sh is executable, so it worked. # bobby @ BobbydeMBP in /tmp/missing [21:17:04] $ sh semester HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Sun, 29 Aug 2021 15:44:11 GMT access-control-allow-origin: * etag: \"612bab4b-1f31\" expires: Tue, 05 Oct 2021 13:27:51 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 4C3C:7D12:6B9300:749FA1:615C507F accept-ranges: bytes date: Tue, 05 Oct 2021 13:17:51 GMT via: 1.1 varnish age: 0 x-served-by: cache-hnd18720-HND x-cache: MISS x-cache-hits: 0 x-timer: S1633439872.565752,VS0,VE149 vary: Accept-Encoding x-fastly-request-id: fc0471f99b294b1f9bc9a71654c37e578904967f content-length: 7985 8.Look up the chmod program (e.g. use man chmod ). 9.Use chmod to make it possible to run the command ./semester rather than having to type sh semester. How does your shell know that the file is supposed to be interpreted using sh? See this page on the shebang line for more information. # bobby @ BobbydeMBP in /tmp/missing [21:18:50] $ ls -l semester -rwxr-xr-x 1 bobby wheel 61 10 5 21:16 semester # bobby @ BobbydeMBP in /tmp/missing [21:18:54] $ ./semester HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Sun, 29 Aug 2021 15:44:11 GMT access-control-allow-origin: * etag: \"612bab4b-1f31\" expires: Tue, 05 Oct 2021 13:27:51 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 4C3C:7D12:6B9300:749FA1:615C507F accept-ranges: bytes date: Tue, 05 Oct 2021 13:18:58 GMT via: 1.1 varnish age: 67 x-served-by: cache-hnd18732-HND x-cache: HIT x-cache-hits: 1 x-timer: S1633439939.541585,VS0,VE1 vary: Accept-Encoding x-fastly-request-id: 199d79a9ffc3c879c1367fc960d99ffd126b1b2b content-length: 7985 10.Use | and > to write the \u201clast modified\u201d date output by semester into a file called last-modified.txt in your home directory. # bobby @ BobbydeMBP in /tmp/missing [21:18:59] $ ./semester | grep -i last-modified > ~/last-modified.txt # bobby @ BobbydeMBP in /tmp/missing [21:19:58] $ cat ~/last-modified.txt last-modified: Sun, 29 Aug 2021 15:44:11 GMT 11.Write a command that reads out your laptop battery\u2019s power level or your desktop machine\u2019s CPU temperature from /sys . Note: if you\u2019re a macOS user, your OS doesn\u2019t have sysfs , so you can skip this exercise. I'm using MacBook Pro , so, no can do ):","title":"Shell"},{"location":"Linux/shell/#the-shell","text":"How To Use Shell !","title":"The Shell"},{"location":"Linux/shell/#basic-command","text":"date : return current date echo : print something echo \"Hello World\" echo Hello\\ World : when the string contain a space, use \\ to translate echo $PATH : show all the path value which + command : return the location of command e.g: which echo","title":"Basic Command"},{"location":"Linux/shell/#absolute-path-and-relative-path","text":"pwd : return current directory cd : enter a directory . : current directory .. : parent directory e.g: cd ./temp : cd ../src : cd / : enter root cd ~ : enter current home cd - : toggle between current directory and last directory ls : list files in current directory ls -l : detail of ls execution of ls -l / : lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 bin -> usr/bin drwxr-xr-x 4 root root 4096 5\u6708 19 15:17 boot drwxrwxr-x 2 root root 4096 4\u6708 23 19:26 cdrom drwxr-xr-x 20 root root 4140 5\u6708 14 20:42 dev drwxr-xr-x 143 root root 12288 5\u6708 27 13:31 etc drwxr-xr-x 3 root root 4096 4\u6708 23 19:27 home lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 lib -> usr/lib lrwxrwxrwx 1 root root 9 4\u6708 23 19:24 lib32 -> usr/lib32 lrwxrwxrwx 1 root root 9 4\u6708 23 19:24 lib64 -> usr/lib64 lrwxrwxrwx 1 root root 10 4\u6708 23 19:24 libx32 -> usr/libx32 drwx------ 2 root root 16384 4\u6708 23 19:24 lost+found drwxr-xr-x 2 root root 4096 10\u6708 22 2020 media drwxr-xr-x 2 root root 4096 10\u6708 22 2020 mnt drwxr-xr-x 2 root root 4096 10\u6708 22 2020 opt dr-xr-xr-x 386 root root 0 5\u6708 5 10:14 proc drwx------ 3 root root 4096 4\u6708 25 11:24 root drwxr-xr-x 32 root root 1040 5\u6708 28 14:04 run lrwxrwxrwx 1 root root 8 4\u6708 23 19:24 sbin -> usr/sbin drwxr-xr-x 2 root root 4096 4\u6708 23 19:34 snap drwxr-xr-x 2 root root 4096 10\u6708 22 2020 srv -rw------- 1 root root 2147483648 4\u6708 23 19:24 swapfile dr-xr-xr-x 13 root root 0 5\u6708 5 10:14 sys drwxrwxrwt 42 root root 12288 5\u6708 28 14:09 tmp drwxr-xr-x 14 root root 4096 10\u6708 22 2020 usr drwxr-xr-x 14 root root 4096 10\u6708 22 2020 var","title":"Absolute Path and Relative Path"},{"location":"Linux/shell/#ls-file-format","text":"lrwxrwxrwx 1 root root 7 4\u6708 23 19:24 bin -> usr/bin","title":"Ls File Format"},{"location":"Linux/shell/#first-charater-meaning","text":"l : symbolic link file; d : directory; - : normal file; b : block; p : pipe; s : socket; c : character","title":"First Charater meaning"},{"location":"Linux/shell/#three-character-pair","text":"r : read w : write x : execute PS: - means you don't have the permission first three pair : permission for user root next three pair : permission for group root last three pairn : permission for everyone else","title":"three character pair"},{"location":"Linux/shell/#file-execution-command","text":"mv foo.bar bar.foo : move(rename) foo.bar to bar.foo cp bar.foo ../ : copy bar.foo into parent directory rm ../bar.foo : remove bar.foo from parent directory mkdir My\\ code : make a folder named My Code rmdir My\\ code/ :remove the folder named My Code man + command : the manual description of command ctrl + l : move current prompt to top","title":"File execution command"},{"location":"Linux/shell/#stream","text":"","title":"Stream"},{"location":"Linux/shell/#input-and-output","text":"> : output stream < : input stream echo hello > hello.txt : write string hello into hello.txt cat hello.txt : show the content of hello.txt cat < hello.txt : cat use hello.txt as input cat < hello.txt > hello2.txt : cat from hello.txt and redirect to hello2.txt cat < hello.txt >> hello2.txt : append hello.txt to hello2.txt echo \"something\" >> hello2.txt : append something into hello2.txt","title":"input and output"},{"location":"Linux/shell/#pipe","text":"| : pipe ls -l / | tail -n1 : return the last line of the ls -l / curl --head --silent google.com : HTTP/1.1 301 Moved Permanently Location: http://www.google.com/ Content-Type: text/html; charset=UTF-8 Date: Fri, 28 May 2021 07:23:47 GMT Expires: Sun, 27 Jun 2021 07:23:47 GMT Cache-Control: public, max-age=2592000 Server: gws Content-Length: 219 X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN curl --head --silent google.com | grep -i Content-Length : return : Content-Length: 219 curl --head --silent google.com | grep -i Content-Length | cut --delimiter= ' ' -f2 : return: 219","title":"Pipe"},{"location":"Linux/shell/#root-user","text":"sudo + command : do command as super user /sys/class : directory contains a lot of sys config files echo 500 > /sys/class/backlight/intel_backlight/brightness : permission denied sudo !! : still permission denied why? because sudo is used on echo , while > doesn't care about the previous command. $ : means you're not running as root # : means you're running as root sudo su : turn into root shell tee : write something to a file echo 1060 | sudo tee brightness : now brightness is 1060 xdg-open file : open a file with correct application","title":"Root User"},{"location":"Linux/shell/#exercises","text":"All classes in this course are accompanied by a series of exercises. Some give you a specific task to do, while others are open-ended, like \u201ctry using X and Y programs\u201d. We highly encourage you to try them out. We have not written solutions for the exercises. If you are stuck on anything in particular, feel free to send us an email describing what you\u2019ve tried so far, and we will try to help you out. 1.For this course, you need to be using a Unix shell like Bash or ZSH. If you are on Linux or macOS, you don\u2019t have to do anything special. If you are on Windows, you need to make sure you are not running cmd.exe or PowerShell; you can use Windows Subsystem for Linux or a Linux virtual machine to use Unix-style command-line tools. To make sure you\u2019re running an appropriate shell, you can try the command echo $SHELL . If it says something like /bin/bash or /usr/bin/zsh , that means you\u2019re running the right program. 2.Create a new directory called missing under /tmp . 3.Look up the touch program. The man program is your friend. 4.Use touch to create a new file called semester in missing . 5.Write the following into that file, one line at a time: #!/bin/sh curl --head --silent https://missing.csail.mit.edu The first line might be tricky to get working. It\u2019s helpful to know that # starts a comment in Bash, and ! has a special meaning even within double-quoted (\") strings. Bash treats single-quoted strings (') differently: they will do the trick in this case. See the Bash quoting manual page for more information. # bobby @ BobbydeMBP in /tmp/missing [21:14:21] $ touch semester # bobby @ BobbydeMBP in /tmp/missing [21:14:32] $ echo \"#!/bin/sh\" > semester zsh: event not found: /bin/sh # bobby @ BobbydeMBP in /tmp/missing [21:14:47] C:1 $ cat semester # bobby @ BobbydeMBP in /tmp/missing [21:15:01] $ echo '#!/bin/sh' > semester # bobby @ BobbydeMBP in /tmp/missing [21:15:20] $ cat semester #!/bin/sh # bobby @ BobbydeMBP in /tmp/missing [21:15:24] $ echo \"curl --head --silent https://missing.csail.mit.edu\" >> semester # bobby @ BobbydeMBP in /tmp/missing [21:16:03] $ cat semester #!/bin/sh curl --head --silent https://missing.csail.mit.edu 6.Try to execute the file, i.e. type the path to the script (./semester) into your shell and press enter. Understand why it doesn\u2019t work by consulting the output of ls (hint: look at the permission bits of the file). # bobby @ BobbydeMBP in /tmp/missing [21:16:17] $ ./semester zsh: permission denied: ./semester # bobby @ BobbydeMBP in /tmp/missing [21:16:56] C:126 $ ls -l semester -rw-r--r-- 1 bobby wheel 61 10 5 21:16 semester 7.Run the command by explicitly starting the sh interpreter, and giving it the file semeste r as the first argument, i.e. sh semester . Why does this work, while ./semester didn\u2019t? when we use sh command, we take semester as input, what we really did was executing sh command, and sh is executable, so it worked. # bobby @ BobbydeMBP in /tmp/missing [21:17:04] $ sh semester HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Sun, 29 Aug 2021 15:44:11 GMT access-control-allow-origin: * etag: \"612bab4b-1f31\" expires: Tue, 05 Oct 2021 13:27:51 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 4C3C:7D12:6B9300:749FA1:615C507F accept-ranges: bytes date: Tue, 05 Oct 2021 13:17:51 GMT via: 1.1 varnish age: 0 x-served-by: cache-hnd18720-HND x-cache: MISS x-cache-hits: 0 x-timer: S1633439872.565752,VS0,VE149 vary: Accept-Encoding x-fastly-request-id: fc0471f99b294b1f9bc9a71654c37e578904967f content-length: 7985 8.Look up the chmod program (e.g. use man chmod ). 9.Use chmod to make it possible to run the command ./semester rather than having to type sh semester. How does your shell know that the file is supposed to be interpreted using sh? See this page on the shebang line for more information. # bobby @ BobbydeMBP in /tmp/missing [21:18:50] $ ls -l semester -rwxr-xr-x 1 bobby wheel 61 10 5 21:16 semester # bobby @ BobbydeMBP in /tmp/missing [21:18:54] $ ./semester HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Sun, 29 Aug 2021 15:44:11 GMT access-control-allow-origin: * etag: \"612bab4b-1f31\" expires: Tue, 05 Oct 2021 13:27:51 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 4C3C:7D12:6B9300:749FA1:615C507F accept-ranges: bytes date: Tue, 05 Oct 2021 13:18:58 GMT via: 1.1 varnish age: 67 x-served-by: cache-hnd18732-HND x-cache: HIT x-cache-hits: 1 x-timer: S1633439939.541585,VS0,VE1 vary: Accept-Encoding x-fastly-request-id: 199d79a9ffc3c879c1367fc960d99ffd126b1b2b content-length: 7985 10.Use | and > to write the \u201clast modified\u201d date output by semester into a file called last-modified.txt in your home directory. # bobby @ BobbydeMBP in /tmp/missing [21:18:59] $ ./semester | grep -i last-modified > ~/last-modified.txt # bobby @ BobbydeMBP in /tmp/missing [21:19:58] $ cat ~/last-modified.txt last-modified: Sun, 29 Aug 2021 15:44:11 GMT 11.Write a command that reads out your laptop battery\u2019s power level or your desktop machine\u2019s CPU temperature from /sys . Note: if you\u2019re a macOS user, your OS doesn\u2019t have sysfs , so you can skip this exercise. I'm using MacBook Pro , so, no can do ):","title":"Exercises"},{"location":"%E4%B8%93%E4%B8%9A%E8%AF%BE/","text":"","title":"\u4e13\u4e1a\u8bfe\u7a0b"},{"location":"%E6%95%B0%E5%AD%A6%E8%AF%BE/","text":"","title":"\u6570\u5b66\u8bfe\u7a0b"},{"location":"%E6%A0%B8%E5%BF%83%E8%AF%BE/","text":"","title":"\u6838\u5fc3\u8bfe\u7a0b"},{"location":"%E6%A0%B8%E5%BF%83%E8%AF%BE/csci0300/","text":"\u8fd9\u95e8\u8bfe\u53eb\u8ba1\u7b97\u7cfb\u7edf\u57fa\u7840 \u6559\u6750 \uff1a csapp \u6388\u8bfe\u8001\u5e08 \u662f6.824 2018 \u7684\u8001\u5e08\uff0c \u4e3b\u8981\u8bb2\u8ff0\u4e86 c\u8bed\u8a00\uff0c\u6c47\u7f16\uff0c\u64cd\u4f5c\u7cfb\u7edf\u57fa\u7840\uff0c\u5206\u5e03\u5f0f\u57fa\u7840\u3002 lab \u548cproject \u90fd\u633a\u597d\u73a9\uff0c\u96be\u5ea6\u5f88\u9ad8\uff0c\u975e\u5e38\u6298\u78e8\u4eba\u3002 \u4ee3\u7801\u5e93\u5730\u5740\uff1a https://github.com/csci0300/ \u7f51\u7ad9: https://cs.brown.edu/courses/csci0300/2021/ \u8001\u5e08\u4ee3\u7801\u6c34\u5e73\u975e\u5e38\u9ad8\uff0c\u6240\u6709\u7684lab\uff0ctest\uff0cproject \u90fd\u662f\u4ed6\u4e00\u4eba\u5b8c\u6210\u3002 \u8fd9\u95e8\u7684\u7279\u70b9\u662f\u8001\u5e08\u5148\u4ecec\u8bed\u8a00\u5f00\u59cb\u8bb2\u8d77\uff0c\u7136\u540e\u8bb2\u5230\u6c47\u7f16\uff0c\u518d\u5230\u7f13\u5b58\uff0c\u518d\u5230\u8fdb\u7a0b\uff0c \u7531\u8fdb\u7a0b\u5e76\u5e26\u4f60\u63d0\u524d\u9886\u7565\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684\u6982\u5ff5\u3002\u4ece\u8fdb\u7a0b\u53c8\u5e26\u4f60\u5230\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002\u5b9e\u5728\u662f\u4f69\u670d\u8001\u5e08\u7684\u529f\u529b\u6c34\u5e73\u3002 \u6ce8\u610f\uff1a \u8bf7\u4e0d\u8981\u516c\u5f00\u81ea\u5df1\u7684\u4ee3\u7801\u3002","title":"csci0300"},{"location":"%E6%B5%8B%E8%AF%95/test/","text":"\u968f\u4fbf\u5199\u70b9\u4e1c\u897f \\[ \\int_0^1x^2dx = \\frac{1}{3}x^3 |_0^1 = \\frac{1}{3} \\]","title":"\u6d4b\u8bd5"},{"location":"%E6%B5%8B%E8%AF%95/test/#_1","text":"\\[ \\int_0^1x^2dx = \\frac{1}{3}x^3 |_0^1 = \\frac{1}{3} \\]","title":"\u968f\u4fbf\u5199\u70b9\u4e1c\u897f"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/","text":"Julia\u5b66\u4e60\u7b14\u8bb0 \u5b89\u88c5\u597dJulia\u73af\u5883\u4e4b\u540e\uff0c\u5728terminal\u4e2d\u8f93\u5165Julia\uff0c\u542f\u52a8Julia CLI\u73af\u5883 # bobby @ MacBook-Pro in ~ [17:49:20] $ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type \"?\" for help, \"]?\" for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.7.0 (2021-11-30) _/ |\\__'_|_|_|\\__'_| | Official https://julialang.org/ release |__/ | julia> \u53d8\u91cf\u8d4b\u503c \u548c\u5927\u591a\u6570\u8bed\u8a00\u4e00\u6837\uff0cJulia\u4e5f\u662f\u901a\u8fc7 = \u8fdb\u884c\u8d4b\u503c\u7684\uff1a julia> x = 3 3 julia> y = 2x 6 Julia\u9ed8\u8ba4\u663e\u793a\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u7528 ; \u7ed3\u5c3e\u6765\u6291\u5236\u8f93\u51fa\uff08\u7c7b\u4f3cMatlab) \u7528 typeof \u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u7684\u7c7b\u578b julia> typeof(y) Int64 \u51fd\u6570 \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528one-line function\u5b9a\u4e49\uff1a julia> f(x) = x + 2 f (generic function with 1 method) julia> f(10) 12 \u5bf9\u4e8e\u4e00\u4e9b\u76f8\u5bf9\u6bd4\u8f83\u957f\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 function \u5173\u952e\u5b57\u6765\u5b9a\u4e49\uff1a julia> function g(x , y) z = x + y return z ^ 2 end g (generic function with 1 method) julia> g(1, 2) 9 for \u5faa\u73af \u7528 for \u53ef\u4ee5\u904d\u5386\u6307\u5b9a\u7684\u503c\uff1a julia> let s = 0 for i in 1:10 s += i end s end 55 \u5982\u4e0a\u4e3aJulia\u4e2d\u7528 for \u5faa\u73af\u8ba1\u7b971\u523010\u7684\u548c\uff0c\u5176\u4e2d 1:10 \u6307[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4e0a\u9762\u8fd8\u7528\u5230\u4e86 let \u8fd9\u4e2a\u5173\u952e\u5b57\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u53d8\u91cf s \u3002\u4e00\u822c\u5982\u679c\u9700\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u5b9e\u73b0\u5b83\uff0c\u4ee5\u65b9\u4fbf\u91cd\u590d\u4f7f\u7528\uff1a julia> function mysum(n) s = 0 for i in 1:n s += i end return s end mysum (generic function with 1 method) julia> mysum(100) 5050 if\u6761\u4ef6\u8bed\u53e5 \u4f7f\u7528 == \u3001 != \u3001 > \u3001 < \u3001 >= \u3001 <= \u7b49\u6761\u4ef6\u8bed\u53e5\u53ef\u4ee5\u5f97\u51fa bool \u578b\u53d8\u91cf: julia> a = 3 3 julia> a == 3 true julia> typeof(a == 3) Bool julia> a > 5 false \u6709\u4e86 bool \u578b\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 if \u6765\u63a7\u5236\u7a0b\u5e8f\uff1a julia> if a < 5 \"small\" else \"big\" end \"small\" \u6570\u7ec4(\u5411\u91cf) julia> v = [1, 2, 3] 3-element Vector{Int64}: 1 2 3 julia> typeof(v) Vector{Int64} (alias for Array{Int64, 1}) \u7528\u65b9\u62ec\u53f7\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7ef4\u5411\u91cf\uff0c\u5411\u91cf\u7684\u4e0b\u6807\u4ece1\u5f00\u59cb\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u8bbf\u95ee\u5411\u91cf\u5143\u7d20 julia> v[2] 2 julia> v[2] = 10 10 julia> v 3-element Vector{Int64}: 1 10 3 \u548cpython\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u6765\u5b9a\u4e49\u4e00\u4e2a\u5411\u91cf\uff1a julia> v2 = [i^2 for i in 1:10] 10-element Vector{Int64}: 1 4 9 16 25 36 49 64 81 100 \u4e8c\u7ef4\u6570\u7ec4\uff08\u77e9\u9635\uff09 Julia\u751f\u6210\u77e9\u9635\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a julia> [1 2 3 4] 2\u00d72 Matrix{Int64}: 1 2 3 4 \u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5185\u7f6e\u7684\u51fd\u6570\u751f\u6210\uff1a julia> zeros(5, 5) 5\u00d75 Matrix{Float64}: 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 julia> zeros(Int, 5, 5) 5\u00d75 Matrix{Int64}: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u53cc\u91cd for \u5faa\u73af\u6765\u751f\u6210\u5236\u5b9a\u5e8f\u5217\u7684\u77e9\u9635: julia> [i + j for i in 1:5, j in 1:6] 5\u00d76 Matrix{Int64}: 2 3 4 5 6 7 3 4 5 6 7 8 4 5 6 7 8 9 5 6 7 8 9 10 6 7 8 9 10 11 Julia\u7684\u57fa\u7840\u90e8\u5206\u5c31\u5230\u8fd9\u91cc\u4e86","title":"Julia"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#julia","text":"\u5b89\u88c5\u597dJulia\u73af\u5883\u4e4b\u540e\uff0c\u5728terminal\u4e2d\u8f93\u5165Julia\uff0c\u542f\u52a8Julia CLI\u73af\u5883 # bobby @ MacBook-Pro in ~ [17:49:20] $ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type \"?\" for help, \"]?\" for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.7.0 (2021-11-30) _/ |\\__'_|_|_|\\__'_| | Official https://julialang.org/ release |__/ | julia>","title":"Julia\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#_1","text":"\u548c\u5927\u591a\u6570\u8bed\u8a00\u4e00\u6837\uff0cJulia\u4e5f\u662f\u901a\u8fc7 = \u8fdb\u884c\u8d4b\u503c\u7684\uff1a julia> x = 3 3 julia> y = 2x 6 Julia\u9ed8\u8ba4\u663e\u793a\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u7528 ; \u7ed3\u5c3e\u6765\u6291\u5236\u8f93\u51fa\uff08\u7c7b\u4f3cMatlab) \u7528 typeof \u53ef\u4ee5\u67e5\u770b\u53d8\u91cf\u7684\u7c7b\u578b julia> typeof(y) Int64","title":"\u53d8\u91cf\u8d4b\u503c"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#_2","text":"\u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528one-line function\u5b9a\u4e49\uff1a julia> f(x) = x + 2 f (generic function with 1 method) julia> f(10) 12 \u5bf9\u4e8e\u4e00\u4e9b\u76f8\u5bf9\u6bd4\u8f83\u957f\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 function \u5173\u952e\u5b57\u6765\u5b9a\u4e49\uff1a julia> function g(x , y) z = x + y return z ^ 2 end g (generic function with 1 method) julia> g(1, 2) 9","title":"\u51fd\u6570"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#for","text":"\u7528 for \u53ef\u4ee5\u904d\u5386\u6307\u5b9a\u7684\u503c\uff1a julia> let s = 0 for i in 1:10 s += i end s end 55 \u5982\u4e0a\u4e3aJulia\u4e2d\u7528 for \u5faa\u73af\u8ba1\u7b971\u523010\u7684\u548c\uff0c\u5176\u4e2d 1:10 \u6307[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4e0a\u9762\u8fd8\u7528\u5230\u4e86 let \u8fd9\u4e2a\u5173\u952e\u5b57\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u53d8\u91cf s \u3002\u4e00\u822c\u5982\u679c\u9700\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u5b9e\u73b0\u5b83\uff0c\u4ee5\u65b9\u4fbf\u91cd\u590d\u4f7f\u7528\uff1a julia> function mysum(n) s = 0 for i in 1:n s += i end return s end mysum (generic function with 1 method) julia> mysum(100) 5050","title":"for \u5faa\u73af"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#if","text":"\u4f7f\u7528 == \u3001 != \u3001 > \u3001 < \u3001 >= \u3001 <= \u7b49\u6761\u4ef6\u8bed\u53e5\u53ef\u4ee5\u5f97\u51fa bool \u578b\u53d8\u91cf: julia> a = 3 3 julia> a == 3 true julia> typeof(a == 3) Bool julia> a > 5 false \u6709\u4e86 bool \u578b\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 if \u6765\u63a7\u5236\u7a0b\u5e8f\uff1a julia> if a < 5 \"small\" else \"big\" end \"small\"","title":"if\u6761\u4ef6\u8bed\u53e5"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#_3","text":"julia> v = [1, 2, 3] 3-element Vector{Int64}: 1 2 3 julia> typeof(v) Vector{Int64} (alias for Array{Int64, 1}) \u7528\u65b9\u62ec\u53f7\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7ef4\u5411\u91cf\uff0c\u5411\u91cf\u7684\u4e0b\u6807\u4ece1\u5f00\u59cb\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u8bbf\u95ee\u5411\u91cf\u5143\u7d20 julia> v[2] 2 julia> v[2] = 10 10 julia> v 3-element Vector{Int64}: 1 10 3 \u548cpython\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u6765\u5b9a\u4e49\u4e00\u4e2a\u5411\u91cf\uff1a julia> v2 = [i^2 for i in 1:10] 10-element Vector{Int64}: 1 4 9 16 25 36 49 64 81 100","title":"\u6570\u7ec4(\u5411\u91cf)"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/julia/#_4","text":"Julia\u751f\u6210\u77e9\u9635\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a julia> [1 2 3 4] 2\u00d72 Matrix{Int64}: 1 2 3 4 \u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5185\u7f6e\u7684\u51fd\u6570\u751f\u6210\uff1a julia> zeros(5, 5) 5\u00d75 Matrix{Float64}: 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 julia> zeros(Int, 5, 5) 5\u00d75 Matrix{Int64}: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u53cc\u91cd for \u5faa\u73af\u6765\u751f\u6210\u5236\u5b9a\u5e8f\u5217\u7684\u77e9\u9635: julia> [i + j for i in 1:5, j in 1:6] 5\u00d76 Matrix{Int64}: 2 3 4 5 6 7 3 4 5 6 7 8 4 5 6 7 8 9 5 6 7 8 9 10 6 7 8 9 10 11 Julia\u7684\u57fa\u7840\u90e8\u5206\u5c31\u5230\u8fd9\u91cc\u4e86","title":"\u4e8c\u7ef4\u6570\u7ec4\uff08\u77e9\u9635\uff09"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/","text":"Matlab \u57fa\u7840\u4e0e\u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305 Matlab\u57fa\u672c\u8bed\u6cd5 \u5411\u91cf\u548c\u77e9\u9635\u7684\u521b\u5efa \u5411\u91cf\u548c\u77e9\u9635\u7684\u64cd\u4f5c Matlab\u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305 Matlab\u7684\u63a7\u5236\u8bed\u53e5 Matlab\u57fa\u672c\u8bed\u6cd5 \u4ec0\u4e48\u662fMatlab Cleve Moler\u521b\u9020\u7684\u4e00\u4e2a\u7528\u4e8e\u6570\u5b66\uff0c\u5de5\u7a0b\u7684\u8ba1\u7b97\u5de5\u5177\u3002 \uff08\u5c31\u662f\u8fd9\u4e48\u7b80\u6d01\uff09 Matlab\u53d8\u91cf \u53d8\u91cf\u547d\u540d\u89c4\u5219\u548c\u7edd\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cblablablah # MATLAB Commands >> x = 1 x = 1 >> y1 = 3 * x^2 + 2*x -6; # \u7528`;`\u6765\u6291\u5236\u8f93\u51fa >> 3*pi^2 + 2*pi -6 # pi\u4e3amatlab\u5185\u7f6e\u53d8\u91cf ans = 29.8920 Matlab\u4f5c\u4e3a\u8ba1\u7b97\u5668 \u4e3e\u4f8b: \u4e8c\u6b21\u65b9\u7a0b\u6839\u7684\u6c42\u89e3 $$ x = \\frac{-b \\pm \\sqrt(b^2-4ac)}{2a} $$ \u57fa\u672c\u8fd0\u7b97\u7b26\uff1a \u52a0: + ; \u51cf: - ; \u4e58: * ; \u9664: / ; \u6307\u6570: ^ ; \u62ec\u53f7: (``) ; # MATLAB Commands >> a = 3; >> b = 2; >> c = -6; >> x1 = (-b+sqrt(b^2-4*a*c))/(2*a) x1 = 1.1196 >> x2 = (-b-sqrt(b^2-4*a*c))/(2*a) x2 = -1.7863 Matlab \u51fd\u6570 matlab\u51fd\u6570\u8c03\u7528\u4e5f\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5927\u81f4\u76f8\u540c \u5982: # Example Functions y = fun(x) y = sin(x) y = log10(x) \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cmatlab\u672c\u8eab\u662f\u4e3a\u77e9\u9635\u6253\u9020\u7684\uff0c\u6240\u4ee5matlab\u51fd\u6570\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u5982 # MATLAB Commands >> x = [0, pi/2, pi, 3*pi/2, 2*pi]; >> sin(x) ans = 0 1.0000 0.0000 -1.0000 -0.0000 min \u51fd\u6570 # MATLAB Commands >> a = min(ans) a = -1 >> [a,I] = min(ans) # \u5f53\u63d0\u4f9b\u4e24\u4e2a\u53d8\u91cf\u65f6\uff0cmin\u4f1a\u8fd4\u56de\u503c(\u7b2c\u4e00\u4e2a\u53d8\u91cf)\uff0c\u503c\u7684\u4e0b\u6807\uff08\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff09 a = -1 I = 4 plot(x, y) \u51fd\u6570 >> plot(x, ans) \u5411\u91cf\u548c\u77e9\u9635\u7684\u521b\u5efa \u7b80\u5355\u7684\u51fd\u6570\u4f8b\u5b50 \\[ y = 3x^2 + 2x-6 \\] \u521b\u5efa\u5411\u91cf >> x = [-2, -1, 0, 1, 2] # \u521b\u5efa\u884c\u5411\u91cf x = -2 -1 0 1 2 >> xCol = [-2;-1;0;1;2] # \u521b\u5efa\u5217\u5411\u91cf xCol = -2 -1 0 1 2 >> y = [-2,-5,-6,-1,10] y = -2 -5 -6 -1 10 >> plot(x, y) \u521b\u5efa\u77e9\u9635 \\[ \\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\] \u4f8b\uff1a \u521b\u5efa\u4e00\u4e2a3 x 3\u77e9\u9635 \\[ \\left[ \\begin{array}{ccc} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{array} \\right] \\] # MATLAB Commands >> M = [1, 2, 3; 4, 5, 6;7, 8, 9] M = 1 2 3 4 5 6 7 8 9 \u77e9\u9635\u521b\u5efa\u51fd\u6570 eye : \u5355\u4f4d\u77e9\u9635 ones : \u77e9\u9635\u8d4b\u503c\u4e3a 1 zeros : \u77e9\u9635\u8d4b\u503c\u4e3a 0 rand : \u77e9\u9635\u8d4b\u503c\u4e3a\u968f\u673a\u503c diag : \u4e09\u89d2\u77e9\u9635 # MATLAB Commands >> e = eye(5) e = 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 >> x = zeros(5) x = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 >> x = zeros(5, 2) # \u4e94\u884c\u4e8c\u5217\u77e9\u9635 x = 0 0 0 0 0 0 0 0 0 0 >> x = rand(3) x = 0.0975 0.9575 0.9706 0.2785 0.9649 0.9572 0.5469 0.1576 0.4854 \u5411\u91cf\u548c\u77e9\u9635\u7684\u64cd\u4f5c \u4e4b\u524d\u63d0\u5230\u7684\u7b80\u5355\u51fd\u6570 \\[ y = 3x^2 + 2x-6 \\] \u663e\u7136\uff0c\u8f93\u51fa\u4e0e\u6211\u4eec\u719f\u77e5\u7684\u4e8c\u6b21\u51fd\u6570\u66f2\u7ebf\u8fd8\u662f\u6709\u5dee\u8ddd\u7684\uff0c\u90a3\u4e48\uff0c\u5982\u4f55\u5f97\u5230\u4e00\u6761\u76f8\u5bf9\u5149\u6ed1\u7684\u66f2\u7ebf\u5462\uff1f \u5411\u91cf\u7684\u8ba1\u7b97 \u6211\u4eec\u5c1d\u8bd5\u4e0b\u76f4\u63a5\u5bf9x\u5411\u91cf\u8fdb\u884c\u8fd0\u7b97 # MATLAB Commands >> x = -2:0.1:2; >> y = 3 * x^2 + 2*x -6 \u9519\u8bef\u4f7f\u7528 ^ (line 51) \u7528\u4e8e\u5bf9\u77e9\u9635\u6c42\u5e42\u7684\u7ef4\u5ea6\u4e0d\u6b63\u786e\u3002\u8bf7\u68c0\u67e5\u5e76\u786e\u4fdd\u77e9\u9635\u4e3a\u65b9\u9635\u5e76\u4e14\u5e42\u4e3a\u6807\u91cf\u3002\u8981\u6267\u884c\u6309\u5143\u7d20\u77e9\u9635\u6c42\u5e42\uff0c\u8bf7\u4f7f\u7528 '.^'\u3002 \u6ce8\u610f \uff1a * , ^ , / \u5728matlab\u4e2d\u90fd\u662f\u4f18\u5148\u7528\u4e8e\u77e9\u9635\u8fd0\u7b97\u7684\uff0c\u5982\u679c\u6211\u4eec\u60f3\u505a\u5143\u7d20\u7ea7\u522b\u7684\u64cd\u4f5c(Element-wise operations),\u5c31\u8be5\u7528\u5230\u5982\u4e0b\u7684\u8fd0\u7b97\u7b26\uff1a .* , ./ , .^ \u4e3e\u4f8b\uff1a v1 [1, 2, 3, 4] v2 [2, 4, 6, 8] v1.*v2 = [1*2, 2*4, 3*6, 4*8] v1./v2 = [1/2, 2/4, 3/6, 4/8] v1.^2 = [1^2, 2^2, 3^2, 4^2] \u7531\u4e8e\u77e9\u9635\u7684 + , - \u4ee5\u53ca\u6570\u4e58\u8fd0\u7b97\u5e76\u4e0d\u7279\u6b8a\uff0c\u6240\u4ee5\u8fd9\u4e9b\u8fd0\u7b97\u5747\u65e0\u9700\u7279\u6b8a\u5316\u5904\u7406 v1 + v2 = [1+2, 2+4, 3+6, 4+8] v1 - v2 = [1-2, 2-4, 3-6, 4-8] \u56de\u5230\u4e00\u5f00\u59cb\u7684\u64cd\u4f5c # MATLAB Commands >> x = -2:0.1:2; >> y = 3*x.^2 + 2*x - 6 y = \u5217 1 \u81f3 9 2.0000 1.0300 0.1200 -0.7300 -1.5200 -2.2500 -2.9200 -3.5300 -4.0800 \u5217 10 \u81f3 18 -4.5700 -5.0000 -5.3700 -5.6800 -5.9300 -6.1200 -6.2500 -6.3200 -6.3300 \u5217 19 \u81f3 27 -6.2800 -6.1700 -6.0000 -5.7700 -5.4800 -5.1300 -4.7200 -4.2500 -3.7200 \u5217 28 \u81f3 36 -3.1300 -2.4800 -1.7700 -1.0000 -0.1700 0.7200 1.6700 2.6800 3.7500 \u5217 37 \u81f3 41 4.8800 6.0700 7.3200 8.6300 10.0000 >> plot(x, y) \u8bbf\u95ee\u77e9\u9635\u5143\u7d20 \u5982\u4e0b\u77e9\u9635\uff1a \u6a2a\u5411\u5206\u522b\u8868\u793a\u5468\u4e00\u81f3\u5468\u4e94\uff0c\u7eb5\u5411\u5219\u5206\u522b\u8868\u793a\u4e0b\u53481\u70b9\u81f36\u70b9\uff0c\u5176\u503c\u6307\u7684\u662f\u76f8\u5e94\u65f6\u95f4\u70b9\u7684 \u6c61\u67d3\u6307\u6570 \\[ data =\\left[ \\begin{array}{ccc} 18 & 32 & 26 & 28 & 46 \\\\ 25 & 42 & 35 & 30 & 52 \\\\ 43 & 44 & 37 & 52 & 54 \\\\ 49 & 38 & 59 & 54 & 55 \\\\ 55 & 48 & 61 & 69 & 61 \\\\ 48 & 34 & 56 & 42 & 56 \\end{array} \\right] \\] \u5982\u679c\u6211\u4eec\u9700\u8981\u5f97\u5230\u5176\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u90a3\u4e48\u5982 x = data(5, 3) , \u6211\u4eec\u5c31\u53d6\u5f97\u4e86\u8be5\u77e9\u9635 \u7b2c\u4e94\u884c , \u7b2c\u4e09\u5217 \u7684\u5143\u7d20\u503c\uff0c\u5373 61 . \u5982\u679c\u6211\u4eec\u9700\u8981\u83b7\u5f97\u4e00\u4e2a\u66f4\u5927\u7684\u5b50\u96c6\u5462\uff1f \u6bd4\u5982\u6211\u4eec\u8981\u5206\u522b\u53d6\u5f97 \u5468\u4e8c\u5230\u5468\u56db \u4e0b\u5348 1\u70b9 \u548c\u4e0b\u5348 5\u70b9 \u7684\u6c61\u67d3\u6307\u6570\uff1a # MATLAB commands >> rows = [1, 5]; >> cols = 2: 4; >> subdata = data(rows, cols); \\[ subdata=\\left[ \\begin{array}{ccc} 32 & 26 & 28 \\\\ 48 & 61 & 69 \\end{array} \\right] \\] \u6211\u4eec\u7ecf\u5e38\u9700\u8981\u83b7\u53d6\u67d0\u4e00\u7eac\u5ea6\u7684\u5143\u7d20\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u67d0\u4e00\u884c\u6216\u8005\u67d0\u4e00\u5217\u7684\u5143\u7d20\uff09\uff0cmatlab\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u63d0\u4f9b\u4e86\u7b80\u4fbf\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u9700\u8981\u83b7\u53d6\u7b2c\u4e00\u5217\u7684\u5143\u7d20\uff1a # MATLAB commands >> col1 = data(:, 1); \u77e9\u9635\u7684\u7edf\u8ba1\u51fd\u6570 \u5982\u4e0b\u77e9\u9635\uff1a \u6a2a\u5411\u5206\u522b\u8868\u793a\u79d1\u76ee\uff0c\u7eb5\u5411\u5219\u5206\u522b\u8868\u793a\u4e0d\u540c\u7684\u5b66\u751f\uff0c\u5176\u503c\u6307\u7684\u662f\u76f8\u5e94\u5b66\u751f\u5bf9\u5e94\u79d1\u76ee\u7684 \u8003\u8bd5\u6210\u7ee9 \\[ scores=\\left[ \\begin{array}{ccc} 85 & 88 & 92 \\\\ 88 & 95 & 90 \\\\ 40 & 60 & 75 \\\\ 60 & 82 & 82 \\end{array} \\right] \\] # MATLAB commands >> testAvg = mean(scores) testAvg = 68.2500 81.2500 84.7500 # testAvg \u5f97\u51fa\u4e86\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u5373\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c testAvg \u5f97\u51fa\u4e86\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u5373\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c,\u56e0\u6b64 mean \u51fd\u6570\u5b9e\u9645\u4e0a\u9ed8\u8ba4\u5c06\u6bcf\u4e00\u5217\u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u6240\u5f97\u51fa\u6765\u7684\u884c\u5411\u91cf\u4e3a\u6bcf\u4e00\u5217\u5143\u7d20\u7684\u5e73\u5747\u503c \u5982\u679c\u6211\u4eec\u60f3\u8ba1\u7b97\u5404\u4e2a\u5b66\u751f\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c\u5462\uff1f # MATLAB commands >> studentAvg = mean(scores, 2) studentAvg = 88.3333 91.0000 58.3333 74.6667 mean \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u7684\u662f\u51fd\u6570\u8fd0\u7528\u7684 \u7ef4\u5ea6 , \u5728\u8fd9\u91cc\u5373 \u884c\u5411\u91cf \u6700\u540e\uff0c\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u51fa\u6240\u6709\u6210\u7ee9\u7684\u5e73\u5747\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u662f\u5148\u8ba1\u7b97\u51fa\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u518d\u5bf9\u8be5\u5e73\u5747\u503c\u5411\u91cf\u8fd0\u7528 mean \u51fd\u6570\uff0c \u4e8c\u662f\u76f4\u63a5\u5c06 scores \u77e9\u9635\u8f6c\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u5411\u91cf\uff0c\u518d\u8fd0\u7528 mean \u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u5747\u503c # MATLAB commands >> mean(mean(scores)) ans = 78.0833 >> mean(scores(:)) ans = 78.0833 \u9664\u4e86 mean \u4ee5\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u76f8\u5173\u7684\u7edf\u8ba1\u51fd\u6570\u5982 max , min , std \u5728matlab\u4e2d\u90fd\u5df2\u96c6\u6210\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u6307\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f\u548c\u957f\u5ea6 \u6307\u5b9a\u6709\u5982\u4e0b\u5c5e\u6027\u7684\u5411\u91cf\u548c\u77e9\u9635 v <1x24 double> A <24x30 double> \u5206\u522b\u6267\u884c length \u51fd\u6570 # MATLAB commands >> n = length(v) n = 24 >> m = length(A) m = 30 \u5bf9\u4e8e\u5411\u91cf\uff0c\u65e0\u8bba\u662f\u884c\u5411\u91cf\u8fd8\u662f\u5217\u5411\u91cf\uff0c length \u51fd\u6570\u90fd\u4f1a\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7136\u800c\uff0c\u5982\u679c\u5bf9\u4e8e\u77e9\u9635\uff0c length \u5219\u4f1a\u8fd4\u56de \u5176\u8f83\u5927\u7684\u4e00\u4e2a\u7eac\u5ea6\u7684\u6570\u503c \uff0c\u8fd9\u5c31\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u56f0\u6270\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u77e9\u9635 >> [nrows, ncols] = size(A); nrows 24 ncols 30 \u6211\u4eec\u9009\u62e9\u4f7f\u7528 size \u51fd\u6570\uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u503c\u90fd\u88ab\u6b63\u5e38\u7684\u63a5\u53d7 \u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305 Image Processing Toolbox \u52a0\u8f7d\u4e0e\u4fdd\u5b58\u56fe\u50cf \u7070\u5ea6\u56fe\u50cf\uff1a # MATLAB commands >> moon = imread('Fig0338(a)(blurry_moon).tif'); moon <540x466 uint8> # \u4ee5\u77e9\u9635\u5f62\u5f0f\u4fdd\u5b58 >> imshow(moon) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u56fe\u50cf\u662f\u4ee5 \u77e9\u9635 \u7684\u5f62\u5f0f\u5b58\u50a8\u7684 \u5bf9\u56fe\u50cf\u8fdb\u884c\u4e00\u7cfb\u5217\u5904\u7406\u540e\u4fdd\u5b58 # MATLAB commands >> imwrite(newMoon, 'newMoonPic.png'); \u5f69\u8272\u56fe\u50cf\uff1a # MATLAB commands >> lena = imread('lena_std.bmp'); lena <512x512x3 uint8> # \u4ee5\u77e9\u9635\u5f62\u5f0f\u4fdd\u5b58 >> imshow(lena) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f69\u8272\u56fe\u50cf\u662f\u7528\u4e00\u4e2a \u4e09\u7ef4\u77e9\u9635 \u5b58\u50a8\u7684 \u56fe\u50cf\u77e9\u9635\u5904\u7406 \u7070\u5ea6\u56fe\u50cf \u662f\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u7684 # MATLAB commands >> grayMan = imread('Fig2.22(b).jpg'); >> imshow(grayMan) \u622a\u53d6\u4e00\u90e8\u5206 >> Icrop = grayMan(32:101,87:175); >> imshow(Icrop) \u5f69\u8272\u56fe\u50cf \u662f\u4e00\u4e2a\u4e09\u7ef4\u77e9\u9635\u8868\u793a\u7684 # MATLAB commands >> I = imread('lena_std.bmp'); >> Ired = I(:,:,1); # \u7ea2\u5206\u91cf >> Igreen = I(:,:,2); # \u7eff\u5206\u91cf >> Iblue = I(:,:,3); # \u84dd\u5206\u91cf \u622a\u53d6\u4e00\u4e2a \u5f69\u8272\u56fe\u50cf >> Icrop = I(100:300, 60:490, :); \u6ce8\u610f\uff0c\u622a\u53d6\u7684\u662f\u524d\u4e24\u7ef4\u7684\u5b50\u96c6\uff0c\u7b2c\u4e09\u7ef4\u7528 : \u5168\u9009 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u56fe\u50cf\u77e9\u9635\u8fdb\u884c\u4fee\u6539\uff0c\u6bd4\u5982\u6211\u4eec\u663e\u793a\u51fa\u4e09\u4e2a\u5206\u91cf\u7684\u56fe\u50cf\uff1a # MATLAB commands >> I = imread('lena_std.bmp'); >> Ired = I; >> Ired(:,:,2) = 0; >> Ired(:,:,3) = 0; >> Igreen = I; >> Igreen(:,:,1) = 0; >> Igreen(:,:,3) = 0; >> Iblue = I; >> Iblue(:,:,1) = 0; >> Iblue(:,:,2) = 0; >> subplot(2,2,1);imshow(I);title('Origin'); >> subplot(2,2,2);imshow(Ired);title('R'); >> subplot(2,2,3);imshow(Igreen);title('G'); >> subplot(2,2,4);imshow(Iblue);title('B'); \u8f6c\u6362\u56fe\u50cf\u6570\u636e\u7c7b\u578b Gamma Adjustment \u4f3d\u9a6c\u6821\u51c6 \\[ I_{new} = 255 * \\left( \\frac{I_{old}}{255} \\right)^y \\] \u5176\u4e2d y \u4e3a\u6821\u51c6\u53c2\u6570 # MATLAB commands >> I1 = imread('Fig0338(a)(blurry_moon).tif'); >> gamma = 0.5; >> I2 = 255*(I1/255).^gamma; \u9519\u8bef\u4f7f\u7528 .^ \u6574\u6570\u53ea\u80fd\u63d0\u5347\u4e3a\u6b63\u6574\u6570\u5e42\u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5cmatlab\u62a5\u9519\u4e86\uff0c\u539f\u56e0\u662f imread \u8bfb\u53d6\u7684\u77e9\u9635\u6570\u636e\u7c7b\u578b\u4e3a uint8 \uff0c\u8fd0\u7b97\u540e\u4f1a\u5931\u53bb\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 im2double \u51fd\u6570\u5c06\u539f uint8 \u6570\u5b57\u7c7b\u578b\u8f6c\u4e3a double \u578b\uff0c\u65b9\u4fbf\u8fdb\u884c\u8fd0\u7b97 # MATLAB commands >> I1 = imread('Fig0338(a)(blurry_moon).tif'); >> I2 = im2double(I1); >> gamma = 0.5; >> I2 = I2.^gamma; >> subplot(1,2,1);imshow(I1);title('Origin'); >> subplot(1,2,2);imshow(I2);title('Adjusted'); \u7a7a\u95f4\u56fe\u50cf\u8fc7\u6ee4 \u52a0\u5f3a\u90e8\u5206\u56fe\u50cf\u5c5e\u6027\u6216\u8fc7\u6ee4\u56fe\u50cf fspecial \u51fd\u6570\uff0c\u4ee5\u53ca\u5e38\u7528\u8fc7\u6ee4\u53c2\u6570 fspecial('type', parameters) Average : Disk : Gaussian : Laplacian : Log : Motion : Prewitt : Sobel : \u6211\u4eec\u7528 laplacian \u8f6c\u6362\u6765\u63d0\u53d6\u6708\u7403\u56fe\u50cf\u7684\u8fb9\u7f18 # MATLAB commands >> moon = imread('Fig0338(a)(blurry_moon).tif'); >> h = fspecial('laplacian', 0.5); >> newMoon = imfilter(moon, h); >> imshow(newMoon); \u6211\u4eec\u8fd8\u53ef\u4ee5\u505a\u4e00\u4e9b\u64cd\u4f5c\u4f7f\u5f97\u56fe\u50cf\u66f4\u9510\u5229 # MATLAB commands >> sharpend = moon - newMoon; >> subplot(1,3,1);imshow(moon);title('origin'); >> subplot(1,3,2);imshow(newMoon);title('edge'); >> subplot(1,3,3);imshow(sharpend);title('sharpened'); Matlab\u6d41\u7a0b\u63a7\u5236 \u6d41\u7a0b\u63a7\u5236\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u90fd\u5171\u6709\u7684\u5c5e\u6027\u4e4b\u4e00\uff0c matlab \u4e5f\u4e0d\u4f8b\u5916 \u5199\u4e00\u4e2a for \u5faa\u73af \u5047\u8bbe\u4e00\u4e2a\u573a\u666f\uff0c\u5e74\u5316\u7387\u662f 0.02 \uff0c\u521d\u59cb\u8d44\u91d1\u4e3a 20000 ,\u9700\u8981\u5c06\u4e4b\u540e\u4e00\u767e\u5e74\u7684\u8d44\u91d1\u72b6\u51b5\u8ba1\u7b97\u51fa\u6765\u5e76\u5b58\u5165\u6570\u7ec4 # MATLAB script r = 0.02; balance = zero(1, 100); balance(1) = 20000; for k = 1: 99 balance(k+1) = (1+r) * balance(k); end If - ELSE \u8bed\u53e5 \u5047\u8bbe\u6709\u5982\u4e0b\u7684\u573a\u666f\uff0c\u8003\u8651\u505c\u8f66\u8d39\u7528\u95ee\u9898 # MATLAB script if hours <= 1 fee = 0; elseif hours > 1 & hours < 7 fee = 5*(hours - 1); else fee = 35; end","title":"Matlab"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab","text":"Matlab\u57fa\u672c\u8bed\u6cd5 \u5411\u91cf\u548c\u77e9\u9635\u7684\u521b\u5efa \u5411\u91cf\u548c\u77e9\u9635\u7684\u64cd\u4f5c Matlab\u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305 Matlab\u7684\u63a7\u5236\u8bed\u53e5","title":"Matlab \u57fa\u7840\u4e0e\u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_1","text":"","title":"Matlab\u57fa\u672c\u8bed\u6cd5"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_2","text":"Cleve Moler\u521b\u9020\u7684\u4e00\u4e2a\u7528\u4e8e\u6570\u5b66\uff0c\u5de5\u7a0b\u7684\u8ba1\u7b97\u5de5\u5177\u3002 \uff08\u5c31\u662f\u8fd9\u4e48\u7b80\u6d01\uff09","title":"\u4ec0\u4e48\u662fMatlab"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_3","text":"\u53d8\u91cf\u547d\u540d\u89c4\u5219\u548c\u7edd\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cblablablah # MATLAB Commands >> x = 1 x = 1 >> y1 = 3 * x^2 + 2*x -6; # \u7528`;`\u6765\u6291\u5236\u8f93\u51fa >> 3*pi^2 + 2*pi -6 # pi\u4e3amatlab\u5185\u7f6e\u53d8\u91cf ans = 29.8920","title":"Matlab\u53d8\u91cf"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_4","text":"\u4e3e\u4f8b: \u4e8c\u6b21\u65b9\u7a0b\u6839\u7684\u6c42\u89e3 $$ x = \\frac{-b \\pm \\sqrt(b^2-4ac)}{2a} $$ \u57fa\u672c\u8fd0\u7b97\u7b26\uff1a \u52a0: + ; \u51cf: - ; \u4e58: * ; \u9664: / ; \u6307\u6570: ^ ; \u62ec\u53f7: (``) ; # MATLAB Commands >> a = 3; >> b = 2; >> c = -6; >> x1 = (-b+sqrt(b^2-4*a*c))/(2*a) x1 = 1.1196 >> x2 = (-b-sqrt(b^2-4*a*c))/(2*a) x2 = -1.7863","title":"Matlab\u4f5c\u4e3a\u8ba1\u7b97\u5668"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_5","text":"matlab\u51fd\u6570\u8c03\u7528\u4e5f\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5927\u81f4\u76f8\u540c \u5982: # Example Functions y = fun(x) y = sin(x) y = log10(x) \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cmatlab\u672c\u8eab\u662f\u4e3a\u77e9\u9635\u6253\u9020\u7684\uff0c\u6240\u4ee5matlab\u51fd\u6570\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u5982 # MATLAB Commands >> x = [0, pi/2, pi, 3*pi/2, 2*pi]; >> sin(x) ans = 0 1.0000 0.0000 -1.0000 -0.0000 min \u51fd\u6570 # MATLAB Commands >> a = min(ans) a = -1 >> [a,I] = min(ans) # \u5f53\u63d0\u4f9b\u4e24\u4e2a\u53d8\u91cf\u65f6\uff0cmin\u4f1a\u8fd4\u56de\u503c(\u7b2c\u4e00\u4e2a\u53d8\u91cf)\uff0c\u503c\u7684\u4e0b\u6807\uff08\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff09 a = -1 I = 4 plot(x, y) \u51fd\u6570 >> plot(x, ans)","title":"Matlab \u51fd\u6570"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_1","text":"\u7b80\u5355\u7684\u51fd\u6570\u4f8b\u5b50 \\[ y = 3x^2 + 2x-6 \\]","title":"\u5411\u91cf\u548c\u77e9\u9635\u7684\u521b\u5efa"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_2","text":">> x = [-2, -1, 0, 1, 2] # \u521b\u5efa\u884c\u5411\u91cf x = -2 -1 0 1 2 >> xCol = [-2;-1;0;1;2] # \u521b\u5efa\u5217\u5411\u91cf xCol = -2 -1 0 1 2 >> y = [-2,-5,-6,-1,10] y = -2 -5 -6 -1 10 >> plot(x, y)","title":"\u521b\u5efa\u5411\u91cf"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_3","text":"\\[ \\left[ \\begin{array}{ccc} a_{11}& a_{12} & a_{13} \\\\ a_{21}& a_{22} & a_{23} \\\\ a_{31}& a_{32} & a_{33} \\end{array} \\right] \\] \u4f8b\uff1a \u521b\u5efa\u4e00\u4e2a3 x 3\u77e9\u9635 \\[ \\left[ \\begin{array}{ccc} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{array} \\right] \\] # MATLAB Commands >> M = [1, 2, 3; 4, 5, 6;7, 8, 9] M = 1 2 3 4 5 6 7 8 9","title":"\u521b\u5efa\u77e9\u9635"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_4","text":"eye : \u5355\u4f4d\u77e9\u9635 ones : \u77e9\u9635\u8d4b\u503c\u4e3a 1 zeros : \u77e9\u9635\u8d4b\u503c\u4e3a 0 rand : \u77e9\u9635\u8d4b\u503c\u4e3a\u968f\u673a\u503c diag : \u4e09\u89d2\u77e9\u9635 # MATLAB Commands >> e = eye(5) e = 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 >> x = zeros(5) x = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 >> x = zeros(5, 2) # \u4e94\u884c\u4e8c\u5217\u77e9\u9635 x = 0 0 0 0 0 0 0 0 0 0 >> x = rand(3) x = 0.0975 0.9575 0.9706 0.2785 0.9649 0.9572 0.5469 0.1576 0.4854","title":"\u77e9\u9635\u521b\u5efa\u51fd\u6570"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_5","text":"\u4e4b\u524d\u63d0\u5230\u7684\u7b80\u5355\u51fd\u6570 \\[ y = 3x^2 + 2x-6 \\] \u663e\u7136\uff0c\u8f93\u51fa\u4e0e\u6211\u4eec\u719f\u77e5\u7684\u4e8c\u6b21\u51fd\u6570\u66f2\u7ebf\u8fd8\u662f\u6709\u5dee\u8ddd\u7684\uff0c\u90a3\u4e48\uff0c\u5982\u4f55\u5f97\u5230\u4e00\u6761\u76f8\u5bf9\u5149\u6ed1\u7684\u66f2\u7ebf\u5462\uff1f","title":"\u5411\u91cf\u548c\u77e9\u9635\u7684\u64cd\u4f5c"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_6","text":"\u6211\u4eec\u5c1d\u8bd5\u4e0b\u76f4\u63a5\u5bf9x\u5411\u91cf\u8fdb\u884c\u8fd0\u7b97 # MATLAB Commands >> x = -2:0.1:2; >> y = 3 * x^2 + 2*x -6 \u9519\u8bef\u4f7f\u7528 ^ (line 51) \u7528\u4e8e\u5bf9\u77e9\u9635\u6c42\u5e42\u7684\u7ef4\u5ea6\u4e0d\u6b63\u786e\u3002\u8bf7\u68c0\u67e5\u5e76\u786e\u4fdd\u77e9\u9635\u4e3a\u65b9\u9635\u5e76\u4e14\u5e42\u4e3a\u6807\u91cf\u3002\u8981\u6267\u884c\u6309\u5143\u7d20\u77e9\u9635\u6c42\u5e42\uff0c\u8bf7\u4f7f\u7528 '.^'\u3002 \u6ce8\u610f \uff1a * , ^ , / \u5728matlab\u4e2d\u90fd\u662f\u4f18\u5148\u7528\u4e8e\u77e9\u9635\u8fd0\u7b97\u7684\uff0c\u5982\u679c\u6211\u4eec\u60f3\u505a\u5143\u7d20\u7ea7\u522b\u7684\u64cd\u4f5c(Element-wise operations),\u5c31\u8be5\u7528\u5230\u5982\u4e0b\u7684\u8fd0\u7b97\u7b26\uff1a .* , ./ , .^ \u4e3e\u4f8b\uff1a v1 [1, 2, 3, 4] v2 [2, 4, 6, 8] v1.*v2 = [1*2, 2*4, 3*6, 4*8] v1./v2 = [1/2, 2/4, 3/6, 4/8] v1.^2 = [1^2, 2^2, 3^2, 4^2] \u7531\u4e8e\u77e9\u9635\u7684 + , - \u4ee5\u53ca\u6570\u4e58\u8fd0\u7b97\u5e76\u4e0d\u7279\u6b8a\uff0c\u6240\u4ee5\u8fd9\u4e9b\u8fd0\u7b97\u5747\u65e0\u9700\u7279\u6b8a\u5316\u5904\u7406 v1 + v2 = [1+2, 2+4, 3+6, 4+8] v1 - v2 = [1-2, 2-4, 3-6, 4-8] \u56de\u5230\u4e00\u5f00\u59cb\u7684\u64cd\u4f5c # MATLAB Commands >> x = -2:0.1:2; >> y = 3*x.^2 + 2*x - 6 y = \u5217 1 \u81f3 9 2.0000 1.0300 0.1200 -0.7300 -1.5200 -2.2500 -2.9200 -3.5300 -4.0800 \u5217 10 \u81f3 18 -4.5700 -5.0000 -5.3700 -5.6800 -5.9300 -6.1200 -6.2500 -6.3200 -6.3300 \u5217 19 \u81f3 27 -6.2800 -6.1700 -6.0000 -5.7700 -5.4800 -5.1300 -4.7200 -4.2500 -3.7200 \u5217 28 \u81f3 36 -3.1300 -2.4800 -1.7700 -1.0000 -0.1700 0.7200 1.6700 2.6800 3.7500 \u5217 37 \u81f3 41 4.8800 6.0700 7.3200 8.6300 10.0000 >> plot(x, y)","title":"\u5411\u91cf\u7684\u8ba1\u7b97"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_7","text":"\u5982\u4e0b\u77e9\u9635\uff1a \u6a2a\u5411\u5206\u522b\u8868\u793a\u5468\u4e00\u81f3\u5468\u4e94\uff0c\u7eb5\u5411\u5219\u5206\u522b\u8868\u793a\u4e0b\u53481\u70b9\u81f36\u70b9\uff0c\u5176\u503c\u6307\u7684\u662f\u76f8\u5e94\u65f6\u95f4\u70b9\u7684 \u6c61\u67d3\u6307\u6570 \\[ data =\\left[ \\begin{array}{ccc} 18 & 32 & 26 & 28 & 46 \\\\ 25 & 42 & 35 & 30 & 52 \\\\ 43 & 44 & 37 & 52 & 54 \\\\ 49 & 38 & 59 & 54 & 55 \\\\ 55 & 48 & 61 & 69 & 61 \\\\ 48 & 34 & 56 & 42 & 56 \\end{array} \\right] \\] \u5982\u679c\u6211\u4eec\u9700\u8981\u5f97\u5230\u5176\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u90a3\u4e48\u5982 x = data(5, 3) , \u6211\u4eec\u5c31\u53d6\u5f97\u4e86\u8be5\u77e9\u9635 \u7b2c\u4e94\u884c , \u7b2c\u4e09\u5217 \u7684\u5143\u7d20\u503c\uff0c\u5373 61 . \u5982\u679c\u6211\u4eec\u9700\u8981\u83b7\u5f97\u4e00\u4e2a\u66f4\u5927\u7684\u5b50\u96c6\u5462\uff1f \u6bd4\u5982\u6211\u4eec\u8981\u5206\u522b\u53d6\u5f97 \u5468\u4e8c\u5230\u5468\u56db \u4e0b\u5348 1\u70b9 \u548c\u4e0b\u5348 5\u70b9 \u7684\u6c61\u67d3\u6307\u6570\uff1a # MATLAB commands >> rows = [1, 5]; >> cols = 2: 4; >> subdata = data(rows, cols); \\[ subdata=\\left[ \\begin{array}{ccc} 32 & 26 & 28 \\\\ 48 & 61 & 69 \\end{array} \\right] \\] \u6211\u4eec\u7ecf\u5e38\u9700\u8981\u83b7\u53d6\u67d0\u4e00\u7eac\u5ea6\u7684\u5143\u7d20\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u67d0\u4e00\u884c\u6216\u8005\u67d0\u4e00\u5217\u7684\u5143\u7d20\uff09\uff0cmatlab\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u63d0\u4f9b\u4e86\u7b80\u4fbf\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u9700\u8981\u83b7\u53d6\u7b2c\u4e00\u5217\u7684\u5143\u7d20\uff1a # MATLAB commands >> col1 = data(:, 1);","title":"\u8bbf\u95ee\u77e9\u9635\u5143\u7d20"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_8","text":"\u5982\u4e0b\u77e9\u9635\uff1a \u6a2a\u5411\u5206\u522b\u8868\u793a\u79d1\u76ee\uff0c\u7eb5\u5411\u5219\u5206\u522b\u8868\u793a\u4e0d\u540c\u7684\u5b66\u751f\uff0c\u5176\u503c\u6307\u7684\u662f\u76f8\u5e94\u5b66\u751f\u5bf9\u5e94\u79d1\u76ee\u7684 \u8003\u8bd5\u6210\u7ee9 \\[ scores=\\left[ \\begin{array}{ccc} 85 & 88 & 92 \\\\ 88 & 95 & 90 \\\\ 40 & 60 & 75 \\\\ 60 & 82 & 82 \\end{array} \\right] \\] # MATLAB commands >> testAvg = mean(scores) testAvg = 68.2500 81.2500 84.7500 # testAvg \u5f97\u51fa\u4e86\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u5373\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c testAvg \u5f97\u51fa\u4e86\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u5373\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c,\u56e0\u6b64 mean \u51fd\u6570\u5b9e\u9645\u4e0a\u9ed8\u8ba4\u5c06\u6bcf\u4e00\u5217\u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u6240\u5f97\u51fa\u6765\u7684\u884c\u5411\u91cf\u4e3a\u6bcf\u4e00\u5217\u5143\u7d20\u7684\u5e73\u5747\u503c \u5982\u679c\u6211\u4eec\u60f3\u8ba1\u7b97\u5404\u4e2a\u5b66\u751f\u6bcf\u95e8\u79d1\u76ee\u7684\u5e73\u5747\u503c\u5462\uff1f # MATLAB commands >> studentAvg = mean(scores, 2) studentAvg = 88.3333 91.0000 58.3333 74.6667 mean \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u7684\u662f\u51fd\u6570\u8fd0\u7528\u7684 \u7ef4\u5ea6 , \u5728\u8fd9\u91cc\u5373 \u884c\u5411\u91cf \u6700\u540e\uff0c\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u51fa\u6240\u6709\u6210\u7ee9\u7684\u5e73\u5747\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u662f\u5148\u8ba1\u7b97\u51fa\u6bcf\u4e00\u5217\u7684\u5e73\u5747\u503c\uff0c\u518d\u5bf9\u8be5\u5e73\u5747\u503c\u5411\u91cf\u8fd0\u7528 mean \u51fd\u6570\uff0c \u4e8c\u662f\u76f4\u63a5\u5c06 scores \u77e9\u9635\u8f6c\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u5411\u91cf\uff0c\u518d\u8fd0\u7528 mean \u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u5747\u503c # MATLAB commands >> mean(mean(scores)) ans = 78.0833 >> mean(scores(:)) ans = 78.0833 \u9664\u4e86 mean \u4ee5\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u76f8\u5173\u7684\u7edf\u8ba1\u51fd\u6570\u5982 max , min , std \u5728matlab\u4e2d\u90fd\u5df2\u96c6\u6210\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002","title":"\u77e9\u9635\u7684\u7edf\u8ba1\u51fd\u6570"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_9","text":"\u6307\u5b9a\u6709\u5982\u4e0b\u5c5e\u6027\u7684\u5411\u91cf\u548c\u77e9\u9635 v <1x24 double> A <24x30 double> \u5206\u522b\u6267\u884c length \u51fd\u6570 # MATLAB commands >> n = length(v) n = 24 >> m = length(A) m = 30 \u5bf9\u4e8e\u5411\u91cf\uff0c\u65e0\u8bba\u662f\u884c\u5411\u91cf\u8fd8\u662f\u5217\u5411\u91cf\uff0c length \u51fd\u6570\u90fd\u4f1a\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7136\u800c\uff0c\u5982\u679c\u5bf9\u4e8e\u77e9\u9635\uff0c length \u5219\u4f1a\u8fd4\u56de \u5176\u8f83\u5927\u7684\u4e00\u4e2a\u7eac\u5ea6\u7684\u6570\u503c \uff0c\u8fd9\u5c31\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u56f0\u6270\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u77e9\u9635 >> [nrows, ncols] = size(A); nrows 24 ncols 30 \u6211\u4eec\u9009\u62e9\u4f7f\u7528 size \u51fd\u6570\uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u503c\u90fd\u88ab\u6b63\u5e38\u7684\u63a5\u53d7","title":"\u6307\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f\u548c\u957f\u5ea6"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_10","text":"Image Processing Toolbox","title":"\u56fe\u50cf\u5904\u7406\u5de5\u5177\u5305"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_11","text":"\u7070\u5ea6\u56fe\u50cf\uff1a # MATLAB commands >> moon = imread('Fig0338(a)(blurry_moon).tif'); moon <540x466 uint8> # \u4ee5\u77e9\u9635\u5f62\u5f0f\u4fdd\u5b58 >> imshow(moon) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u56fe\u50cf\u662f\u4ee5 \u77e9\u9635 \u7684\u5f62\u5f0f\u5b58\u50a8\u7684 \u5bf9\u56fe\u50cf\u8fdb\u884c\u4e00\u7cfb\u5217\u5904\u7406\u540e\u4fdd\u5b58 # MATLAB commands >> imwrite(newMoon, 'newMoonPic.png'); \u5f69\u8272\u56fe\u50cf\uff1a # MATLAB commands >> lena = imread('lena_std.bmp'); lena <512x512x3 uint8> # \u4ee5\u77e9\u9635\u5f62\u5f0f\u4fdd\u5b58 >> imshow(lena) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f69\u8272\u56fe\u50cf\u662f\u7528\u4e00\u4e2a \u4e09\u7ef4\u77e9\u9635 \u5b58\u50a8\u7684","title":"\u52a0\u8f7d\u4e0e\u4fdd\u5b58\u56fe\u50cf"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_12","text":"\u7070\u5ea6\u56fe\u50cf \u662f\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u7684 # MATLAB commands >> grayMan = imread('Fig2.22(b).jpg'); >> imshow(grayMan) \u622a\u53d6\u4e00\u90e8\u5206 >> Icrop = grayMan(32:101,87:175); >> imshow(Icrop) \u5f69\u8272\u56fe\u50cf \u662f\u4e00\u4e2a\u4e09\u7ef4\u77e9\u9635\u8868\u793a\u7684 # MATLAB commands >> I = imread('lena_std.bmp'); >> Ired = I(:,:,1); # \u7ea2\u5206\u91cf >> Igreen = I(:,:,2); # \u7eff\u5206\u91cf >> Iblue = I(:,:,3); # \u84dd\u5206\u91cf \u622a\u53d6\u4e00\u4e2a \u5f69\u8272\u56fe\u50cf >> Icrop = I(100:300, 60:490, :); \u6ce8\u610f\uff0c\u622a\u53d6\u7684\u662f\u524d\u4e24\u7ef4\u7684\u5b50\u96c6\uff0c\u7b2c\u4e09\u7ef4\u7528 : \u5168\u9009 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u56fe\u50cf\u77e9\u9635\u8fdb\u884c\u4fee\u6539\uff0c\u6bd4\u5982\u6211\u4eec\u663e\u793a\u51fa\u4e09\u4e2a\u5206\u91cf\u7684\u56fe\u50cf\uff1a # MATLAB commands >> I = imread('lena_std.bmp'); >> Ired = I; >> Ired(:,:,2) = 0; >> Ired(:,:,3) = 0; >> Igreen = I; >> Igreen(:,:,1) = 0; >> Igreen(:,:,3) = 0; >> Iblue = I; >> Iblue(:,:,1) = 0; >> Iblue(:,:,2) = 0; >> subplot(2,2,1);imshow(I);title('Origin'); >> subplot(2,2,2);imshow(Ired);title('R'); >> subplot(2,2,3);imshow(Igreen);title('G'); >> subplot(2,2,4);imshow(Iblue);title('B');","title":"\u56fe\u50cf\u77e9\u9635\u5904\u7406"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_13","text":"Gamma Adjustment \u4f3d\u9a6c\u6821\u51c6 \\[ I_{new} = 255 * \\left( \\frac{I_{old}}{255} \\right)^y \\] \u5176\u4e2d y \u4e3a\u6821\u51c6\u53c2\u6570 # MATLAB commands >> I1 = imread('Fig0338(a)(blurry_moon).tif'); >> gamma = 0.5; >> I2 = 255*(I1/255).^gamma; \u9519\u8bef\u4f7f\u7528 .^ \u6574\u6570\u53ea\u80fd\u63d0\u5347\u4e3a\u6b63\u6574\u6570\u5e42\u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5cmatlab\u62a5\u9519\u4e86\uff0c\u539f\u56e0\u662f imread \u8bfb\u53d6\u7684\u77e9\u9635\u6570\u636e\u7c7b\u578b\u4e3a uint8 \uff0c\u8fd0\u7b97\u540e\u4f1a\u5931\u53bb\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 im2double \u51fd\u6570\u5c06\u539f uint8 \u6570\u5b57\u7c7b\u578b\u8f6c\u4e3a double \u578b\uff0c\u65b9\u4fbf\u8fdb\u884c\u8fd0\u7b97 # MATLAB commands >> I1 = imread('Fig0338(a)(blurry_moon).tif'); >> I2 = im2double(I1); >> gamma = 0.5; >> I2 = I2.^gamma; >> subplot(1,2,1);imshow(I1);title('Origin'); >> subplot(1,2,2);imshow(I2);title('Adjusted');","title":"\u8f6c\u6362\u56fe\u50cf\u6570\u636e\u7c7b\u578b"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#_14","text":"\u52a0\u5f3a\u90e8\u5206\u56fe\u50cf\u5c5e\u6027\u6216\u8fc7\u6ee4\u56fe\u50cf fspecial \u51fd\u6570\uff0c\u4ee5\u53ca\u5e38\u7528\u8fc7\u6ee4\u53c2\u6570 fspecial('type', parameters) Average : Disk : Gaussian : Laplacian : Log : Motion : Prewitt : Sobel : \u6211\u4eec\u7528 laplacian \u8f6c\u6362\u6765\u63d0\u53d6\u6708\u7403\u56fe\u50cf\u7684\u8fb9\u7f18 # MATLAB commands >> moon = imread('Fig0338(a)(blurry_moon).tif'); >> h = fspecial('laplacian', 0.5); >> newMoon = imfilter(moon, h); >> imshow(newMoon); \u6211\u4eec\u8fd8\u53ef\u4ee5\u505a\u4e00\u4e9b\u64cd\u4f5c\u4f7f\u5f97\u56fe\u50cf\u66f4\u9510\u5229 # MATLAB commands >> sharpend = moon - newMoon; >> subplot(1,3,1);imshow(moon);title('origin'); >> subplot(1,3,2);imshow(newMoon);title('edge'); >> subplot(1,3,3);imshow(sharpend);title('sharpened');","title":"\u7a7a\u95f4\u56fe\u50cf\u8fc7\u6ee4"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#matlab_6","text":"\u6d41\u7a0b\u63a7\u5236\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u90fd\u5171\u6709\u7684\u5c5e\u6027\u4e4b\u4e00\uff0c matlab \u4e5f\u4e0d\u4f8b\u5916","title":"Matlab\u6d41\u7a0b\u63a7\u5236"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#for","text":"\u5047\u8bbe\u4e00\u4e2a\u573a\u666f\uff0c\u5e74\u5316\u7387\u662f 0.02 \uff0c\u521d\u59cb\u8d44\u91d1\u4e3a 20000 ,\u9700\u8981\u5c06\u4e4b\u540e\u4e00\u767e\u5e74\u7684\u8d44\u91d1\u72b6\u51b5\u8ba1\u7b97\u51fa\u6765\u5e76\u5b58\u5165\u6570\u7ec4 # MATLAB script r = 0.02; balance = zero(1, 100); balance(1) = 20000; for k = 1: 99 balance(k+1) = (1+r) * balance(k); end","title":"\u5199\u4e00\u4e2afor\u5faa\u73af"},{"location":"%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/matlab/#if-else","text":"\u5047\u8bbe\u6709\u5982\u4e0b\u7684\u573a\u666f\uff0c\u8003\u8651\u505c\u8f66\u8d39\u7528\u95ee\u9898 # MATLAB script if hours <= 1 fee = 0; elseif hours > 1 & hours < 7 fee = 5*(hours - 1); else fee = 35; end","title":"If-ELSE\u8bed\u53e5"}]}